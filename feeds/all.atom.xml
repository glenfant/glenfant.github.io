<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Digital Snake and Family</title><link href="http://glenfant.github.io/" rel="alternate"></link><link href="http://glenfant.github.io/feeds/all.atom.xml" rel="self"></link><id>http://glenfant.github.io/</id><updated>2020-08-04T13:01:00+02:00</updated><subtitle>Gossips about (mostly) Python based technologies</subtitle><entry><title>Awaiting a blocking callable</title><link href="http://glenfant.github.io/awaiting-a-blocking-callable.html" rel="alternate"></link><published>2020-08-04T13:01:00+02:00</published><updated>2020-08-04T13:01:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2020-08-04:/awaiting-a-blocking-callable.html</id><summary type="html">&lt;p class="first last"&gt;Transform a regular callable (function / method) into an async coroutine&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl; dr&lt;/h2&gt;
&lt;p&gt;Working with frameworks that leverage the &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; paradigm is now familiar to lots of Python
programmers with popular asynchronous frameworks like FastAPI, Faust, Trio (name yours...).&lt;/p&gt;
&lt;p&gt;We need sometimes to use good libs that do not (yet ?) leverage the - not so - new &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; way,
and provide only blocking APIs. Think about SQLAlchemy, or others.&lt;/p&gt;
&lt;p&gt;Using such services from a coroutine under event loop control will lock the event loop while
executing thus yield a performance issue.&lt;/p&gt;
&lt;p&gt;Hopefully the stdlib provides the &lt;a class="reference external" href="https://docs.python.org/3/library/concurrent.futures.html"&gt;concurrent.futures&lt;/a&gt; package that let us work around this
annoyance and make a coroutine from a blocking function or method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code"&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/24dc52bb3fe2c39d20c14369a86c43bf.js?file=call_blocking.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# Running a blocking callable inside a coroutine
# ==============================================

import asyncio
import concurrent.futures
import functools
from typing import Callable, Tuple, Dict, Any

# Use the better suited pool (see doc of ``concurrent.future```)

#pool = concurrent.futures.ThreadPoolExecutor()
#pool = concurrent.futures.ProcessPoolExecutor()
pool = None  # Default asyncio pool

async def call_blocking(func: Callable, *args: Tuple[Any], **kwargs: Dict[str, Any]) -&gt; Any:
    """
    Enable to "await" a blocking I/O callable from an asyncio coroutine

    Args:
        func: The regular blocking callable (function, method)
        args: Positional arguments transmitted to ``func``
        kwargs: Keyword arguments transmitted to ``func``
    
    Returns:
        Anything that's returned by ``func``
    """
    loop = asyncio.get_running_loop()
    new_func = functools.partial(func, *args, **kwargs)
    result = await loop.run_in_executor(pool, new_func)
    return result
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-demo"&gt;
&lt;h2&gt;The demo&lt;/h2&gt;
&lt;p&gt;Just paste this code under the above one...&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/24dc52bb3fe2c39d20c14369a86c43bf.js?file=demo.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;if __name__ == "__main__":
    import time
    from call_blocking import call_blocking

    def multiply(value, multiplier=2):
        # A blocking function
        time.sleep(0.1)
        result = value * multiplier
        time.sleep(0.1)
        return result
    
    class Operations:
        def instmultiply(self, value, multiplier=2):
            return self.clsmultiply(value, multiplier)

        @classmethod
        def clsmultiply(cls, value, multiplier=2):
            return cls.statmultiply(value, multiplier)

        @staticmethod
        def statmultiply(value, multiplier=2):
            return multiply(value, multiplier)


    async def test():
        print("Blocking func")
        result = await call_blocking(multiply, 2, multiplier=3)
        print(result)
        ops = Operations()
        print("Blocking static method")
        result = await call_blocking(ops.statmultiply, 3)
        print(result)
        print("Blocking class method")
        result = await call_blocking(ops.clsmultiply, 3)
        print(result)
        print("Blocking instance method")
        result = await call_blocking(ops.instmultiply, 3)
        print(result)
    
    asyncio.run(test())
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-pool-executor"&gt;
&lt;h2&gt;About the pool executor&lt;/h2&gt;
&lt;p&gt;You may choose the &lt;tt class="docutils literal"&gt;_executor&lt;/tt&gt; being either &lt;tt class="docutils literal"&gt;None&lt;/tt&gt;, a &lt;tt class="docutils literal"&gt;ThreadPoolexecutor&lt;/tt&gt; or a
&lt;tt class="docutils literal"&gt;ProcessPoolExecutor&lt;/tt&gt; instance. Just read the doc of &lt;tt class="docutils literal"&gt;concurrent.futures&lt;/tt&gt; to choose the best
suited. And read the &lt;a class="reference internal" href="#drawbacks"&gt;Drawbacks&lt;/a&gt; below.&lt;/p&gt;
&lt;p&gt;Pool executor constructor take an optional &lt;tt class="docutils literal"&gt;max_workers&lt;/tt&gt; argument you should perhaps tune to
obtain the best possible performances.&lt;/p&gt;
&lt;p&gt;My hints: choose a &lt;tt class="docutils literal"&gt;ThreadPoolExecutor&lt;/tt&gt; for I/O expensive functions, and a &lt;tt class="docutils literal"&gt;ProcessPoolExecutor&lt;/tt&gt;
for heavy computation callables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="drawbacks"&gt;
&lt;h2&gt;Drawbacks&lt;/h2&gt;
&lt;div class="section" id="using-threads"&gt;
&lt;h3&gt;Using threads&lt;/h3&gt;
&lt;p&gt;You must be careful when playing with shared objects that could be modified by your blocking code
and coroutines under event loop control. Avoid this when possible, or use locks.&lt;/p&gt;
&lt;p&gt;In addition lots of trird party packages expose resources that are not &amp;quot;thread safe&amp;quot;, thus cannot be
invoked with this recipe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-processes"&gt;
&lt;h3&gt;Using processes&lt;/h3&gt;
&lt;p&gt;Processes do not share any global. Blocking code and coroutines must communicate via a
&lt;tt class="docutils literal"&gt;multiprocessing.Queue&lt;/tt&gt;. That's not very comfortable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category><category term="Asyncio"></category></entry><entry><title>A Flask "g" object for FastAPI</title><link href="http://glenfant.github.io/flask-g-object-for-fastapi.html" rel="alternate"></link><published>2020-08-02T00:00:00+02:00</published><updated>2020-08-02T00:00:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2020-08-02:/flask-g-object-for-fastapi.html</id><summary type="html">&lt;p class="first last"&gt;The Flask &amp;quot;g&amp;quot; object is a cool feature, FastAPI has no such feature, but wait...&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl; dr&lt;/h2&gt;
&lt;p&gt;Those who are familiar with Flask are familiar with the &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; object that's convenient to have a
&amp;quot;request lifecycle pseudo global&amp;quot; where programmers can store / retrieve arbitrary attributes.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://flask.palletsprojects.com/en/1.1.x/appcontext/#storing-data"&gt;Here is the doc&lt;/a&gt; for that
&lt;tt class="docutils literal"&gt;g&lt;/tt&gt; object. Tons of examples of various usages are available at &lt;a class="reference external" href="https://stackoverflow.com/search?q=%5Bflask%5D+g"&gt;stackoverflow&lt;/a&gt; or blog posts (storing a JWT token, the
required API version, ...).&lt;/p&gt;
&lt;p&gt;From now, I use FastAPI in place of flask for pure restful API servers. And unfortunately, FastAPI
has not a similar feature. The FastAPI documentation says to use the &lt;a class="reference external" href="https://fastapi.tiangolo.com/tutorial/sql-databases/#about-requeststate"&gt;request.state&lt;/a&gt; object. But this
requires to pass the &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; object along in the depth to all callables from the route top
function to every function that needs it.&lt;/p&gt;
&lt;p&gt;Good news, this recipe that leverages both the &lt;a class="reference external" href="https://docs.python.org/3/library/types.html#types.SimpleNamespace"&gt;types.SimpleNamespace&lt;/a&gt; and the new stdlib module
from Python 3.7+ &lt;a class="reference external" href="https://docs.python.org/3/library/contextvars.html"&gt;contextvars&lt;/a&gt; provides a
&lt;tt class="docutils literal"&gt;flask.g&lt;/tt&gt; like feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-big-picture"&gt;
&lt;h2&gt;The big picture&lt;/h2&gt;
&lt;p&gt;In short, the &lt;tt class="docutils literal"&gt;contextvars&lt;/tt&gt; module provides to programmers a convenient way to have &amp;quot;pseudo
globals&amp;quot; that are shared by coroutines participating to the same asynchronous execution cycle. You
can read better explanations than mmine in the official doc (see the link above) and tons of good
examples &lt;a class="reference external" href="https://www.google.com/search?client=firefox-b-d&amp;amp;q=contextvars+tutorial"&gt;from here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;types.SimpleNamespace&lt;/tt&gt; is an arbitrary personal choice for an easy to use attributes
container. Once you'll get the enlightenment of this recipe, you may use a custom object that's
better suited to what you need.&lt;/p&gt;
&lt;p&gt;In short, this recipe shows how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create the request lifecycle shared object.&lt;/li&gt;
&lt;li&gt;(Re)initialize the request lifecycle shared object at each request in a middleware.&lt;/li&gt;
&lt;li&gt;Make a basic usage of that request lifecycle shared object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to rebuild the demo at home, just create and activate a new Python 3.7+ virtualenv with whatever tool you prefer (virtualenv, venv, pew, - name yours) and issue:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;pip install fastapi uvicorn requests&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Note that &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; is here just to make the demo client easier. You would not need it otherwise.&lt;/p&gt;
&lt;p&gt;Now the files...&lt;/p&gt;
&lt;div class="section" id="requestvars-py"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;requestvars.py&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;requestvars&lt;/tt&gt; module provides the &lt;tt class="docutils literal"&gt;contextvars&lt;/tt&gt; bootstrap and the public API for your route
handlers (and app business logic).&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2fe530e5a2b90c28608165b5a18afcaf.js?file=requestvars.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import contextvars
import types
import typing

request_global = contextvars.ContextVar("request_global",
                                        default=types.SimpleNamespace())


def g():
    return request_global.get()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;div class="admonition admonition-disclaimer"&gt;
&lt;p class="first admonition-title"&gt;Disclaimer&lt;/p&gt;
&lt;p class="last"&gt;I know! &amp;quot;My&amp;quot; &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; is a &lt;strong&gt;function&lt;/strong&gt; when the Flask &lt;tt class="docutils literal"&gt;g&lt;/tt&gt; is just a strange &lt;strong&gt;object&lt;/strong&gt; that does
not need to be called. Any help to fill the gap without a monster machinery is welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="asgi-py"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;asgi.py&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Just provides a function that creates our FastAPI &lt;tt class="docutils literal"&gt;app&lt;/tt&gt; object. Nothing special. Just notice the &lt;tt class="docutils literal"&gt;init_requestvars&lt;/tt&gt; dedicated middleware.&lt;/p&gt;
&lt;p&gt;It re-initiallizes the content of our contextvar to an empty &lt;tt class="docutils literal"&gt;types.SimpleNamespace&lt;/tt&gt; object. Of
course, you may customize this with a pre-populated namespace with data required by your business
logic, or choose something lese than a &lt;tt class="docutils literal"&gt;types.SimpleNamespace&lt;/tt&gt; as free attributes container.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2fe530e5a2b90c28608165b5a18afcaf.js?file=asgi.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import requestvars
import types
import fastapi
import routes


def create_app() -&gt; fastapi.FastAPI:
    app = fastapi.FastAPI()

    @app.middleware("http")
    async def init_requestvars(request: fastapi.Request, call_next):
        # Customize that SimpleNamespace with hatever you need
        initial_g = types.SimpleNamespace()
        requestvars.request_global.set(initial_g)
        response = await call_next(request)
        return response

    app.include_router(routes.router)
    return app
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="routes-py"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;routes.py&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Just a simple &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; handler at &lt;tt class="docutils literal"&gt;/foo&lt;/tt&gt; that requires a &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; parameter and returns that
parameters twice. Stupid and useless, its only usage is the use of the &lt;tt class="docutils literal"&gt;requestvars.g&lt;/tt&gt; function
that provides the  request lifecycle pseudo-global.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Line 3:&lt;/dt&gt;
&lt;dd&gt;the usual import as for a global function.&lt;/dd&gt;
&lt;dt&gt;Line 10:&lt;/dt&gt;
&lt;dd&gt;we add the arbitrary attribute &lt;tt class="docutils literal"&gt;blah&lt;/tt&gt; to the request lifecycle pseudo-global which value is
the &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; parameter of the request.&lt;/dd&gt;
&lt;dt&gt;Line 11:&lt;/dt&gt;
&lt;dd&gt;we call the &lt;tt class="docutils literal"&gt;double function&lt;/tt&gt; &lt;strong&gt;with no parameter&lt;/strong&gt;&lt;/dd&gt;
&lt;dt&gt;Line 17:&lt;/dt&gt;
&lt;dd&gt;the &lt;tt class="docutils literal"&gt;double&lt;/tt&gt; async function grabs the &lt;tt class="docutils literal"&gt;blah&lt;/tt&gt; attribute of our request lifecycle
pseudo-global and returns it twice.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The other lines do not need comments event to FastAPI noobs.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2fe530e5a2b90c28608165b5a18afcaf.js?file=routes.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import asyncio
import fastapi
from requestvars import g

router = fastapi.APIRouter()


@router.get("/foo")
async def foo_route(q: str = ""):
    g().blah = q
    result = await double()
    return {"result": result}


async def double():
    await asyncio.sleep(1.0)
    return g().blah * 2
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="server-py"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;server.py&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Is just an ordinary minimal &lt;tt class="docutils literal"&gt;uvicorn&lt;/tt&gt; server which serves our stupid API on
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000/foo?q=whatever&lt;/span&gt;&lt;/tt&gt;. Does not need comment.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2fe530e5a2b90c28608165b5a18afcaf.js?file=server.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import uvicorn
from asgi import create_app


def main():
    app = create_app()
    uvicorn.run(app)


if __name__ == "__main__":
    main()
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="client-py"&gt;
&lt;h3&gt;&lt;tt class="docutils literal"&gt;client.py&lt;/tt&gt;&lt;/h3&gt;
&lt;p&gt;Is just a demo client that consumes our stupid API in an infinite loop, providing as &lt;tt class="docutils literal"&gt;q&lt;/tt&gt; parameter whatever string provided as first shell line argument. Example:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;python client.py whatever&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/2fe530e5a2b90c28608165b5a18afcaf.js?file=client.py'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;import sys
import requests

endpoint = "http://localhost:8000/foo"

query = sys.argv[1]

while True:
    params = {"q": query}
    response = requests.get(endpoint, params=params)
    print(response.json())
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="let-s-run-the-demo"&gt;
&lt;h2&gt;Let's run the demo&lt;/h2&gt;
&lt;p&gt;Okay now open 3 or more terminals. In each terminal, &lt;tt class="docutils literal"&gt;cd&lt;/tt&gt; to the demo directory where you grabbed the above files, and activate the virtual env.&lt;/p&gt;
&lt;p&gt;In the first terminal, run the server:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;python server.py&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the second terminal, run a client with parameter &amp;quot;hop&amp;quot;:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;python client.py hop&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You should see...&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;{'result': 'hophop'}
{'result': 'hophop'}
... And so on each second ...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In the second terminal, run a client with parameter &amp;quot;schtroumpf&amp;quot;:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;python client.py schtroumpf&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You should see...&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;{'result': 'schtroumpfschtroumpf'}
{'result': 'schtroumpfschtroumpf'}
... And so on each second ...&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;You may add as many terminals you want and ontinue on with other custom and unique paraméter, and
notice what you can notice with the first two client terminals:&lt;/p&gt;
&lt;p&gt;Each request lifecycle has its own values that are propagated through the &lt;tt class="docutils literal"&gt;g()&lt;/tt&gt; attributes, that
don't mess with &lt;tt class="docutils literal"&gt;g()&lt;/tt&gt; attributes from other requests lifecycles.&lt;/p&gt;
&lt;p&gt;Any suggestion to improve this recipe is welcome in comments below.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category><category term="Flask"></category><category term="FastAPI"></category></entry><entry><title>A simple customizable configuration</title><link href="http://glenfant.github.io/simple-customizable-configuration.html" rel="alternate"></link><published>2019-03-01T13:01:00+01:00</published><updated>2020-07-31T00:00:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2019-03-01:/simple-customizable-configuration.html</id><summary type="html">&lt;p class="first last"&gt;A simple customizable configuration file&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="tl-dr"&gt;
&lt;h2&gt;tl; dr&lt;/h2&gt;
&lt;p&gt;Okay okay, okay! If you google &amp;quot;python configuration&amp;quot;, you'll get tons of answers with third party nice packages that are capable of managing configuration objects from any format (YAML, JSON, XML, TOML, .ini like, and lots of others) that are stord either in system wide config areas or custom places, with butter and cookies...&lt;/p&gt;
&lt;p&gt;The purpose of this post is not to compare all these good but heavy solutions, but to describe a simple solution that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Does not need any additional third party package&lt;/li&gt;
&lt;li&gt;Store configuration data in Python files. (Thus if strong security matters, you may find this harmful.)&lt;/li&gt;
&lt;li&gt;Let the user provide a custom configuration in a Python file which globals take over the default configuration values.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="first admonition-title"&gt;Attention!&lt;/p&gt;
&lt;p class="last"&gt;If you love the way this recipe provides custom options to your application, from now, you should
consider using  &lt;a class="reference external" href="https://pypi.org/project/pyflexconfig/"&gt;pyflexconfig&lt;/a&gt; in place of this recipe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-files-layout"&gt;
&lt;h2&gt;The files layout&lt;/h2&gt;
&lt;p&gt;This is a very small and useless app that demonstrates this idea, no more.&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
├── app
│&amp;nbsp;&amp;nbsp; ├── __init__.py         -&amp;gt; Nothing interresting for our demo, it just makes the package
│&amp;nbsp;&amp;nbsp; ├── __main__.py         -&amp;gt; Entry point. Only prints options - customized or not
│&amp;nbsp;&amp;nbsp; ├── defaultoptions.py   -&amp;gt; The default options and values
│&amp;nbsp;&amp;nbsp; └── settings.py         -&amp;gt; Exports the &amp;quot;conf&amp;quot; objects with config data in attributes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="main-py"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;__main__.py&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;This is just a &amp;quot;do nearly nothing&amp;quot; application that does not deserve more comments than the... included comments. Just note the &lt;tt class="docutils literal"&gt;from&amp;nbsp; settings import config&lt;/tt&gt; that lets you access to the - maybe customized - configuration options.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
===========
__main__.py
===========

This is just a simple demo that shows how it's simple to use the merged default
and custom configuration options.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# Access your config data from this object's attributes&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, this is the main entry point.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Use some config options&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPTION_1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPTION_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPTION_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="defaultoptions-py"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;defaultoptions.py&lt;/tt&gt;&lt;/h2&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="first admonition-title"&gt;Attention!&lt;/p&gt;
&lt;p class="last"&gt;Do not hesitate to comment in depth each option of a real project and add a copy of this module in your package documentation (this can be easily automated with Sphinx) since the end user needs it to customize the app with his custom options.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;This module provides the default options names and values from its globals with uppercase names with no leading underscore. This is just a dummy example.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
==============
defaultoptions
==============

A special module which globals are available through the config namespace unless
not &amp;quot;forbidden&amp;quot;. See the rules in the &amp;quot;settings&amp;quot; module.

.. warning::

   Do **not** import here from elsewhere in your app unless you may raise a
   circular import error. Anyway, imports from the stdlib or 3rd party package
   are harmless.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;OPTION_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Default value for option 1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;OPTION_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Any Python object&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# These options will not be available because...&lt;/span&gt;
&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Starts with a lowercase&lt;/span&gt;
&lt;span class="n"&gt;_OPTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# Starts with &amp;quot;_&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Anyway you may use &amp;quot;hidden&amp;quot; intermediate objects to build public options&lt;/span&gt;
&lt;span class="n"&gt;_intermediate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;anything&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;OPTION_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_intermediate&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-py"&gt;
&lt;h2&gt;&lt;tt class="docutils literal"&gt;settings.py&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;This is the key module - bones and meat - of this blog article. Leveraging the - not very well known - &lt;cite&gt;runpy module &amp;lt;https://docs.python.org/3.6/library/runpy.html#module-runpy&amp;gt;&lt;/cite&gt; from stdlib to &amp;quot;parse&amp;quot; both default (&lt;tt class="docutils literal"&gt;defaultoptions.py&lt;/tt&gt; from above) and custom (if any) configuration files. The resulting configuration data are exposed as attributes of the &lt;tt class="docutils literal"&gt;config&lt;/tt&gt; object of this module.&lt;/p&gt;
&lt;p&gt;Note that we use below the &lt;tt class="docutils literal"&gt;APP_CUSTOM_OPTIONS&lt;/tt&gt; environment variable to tell where's the custom configuration data. Of course you may rename it such it relates to your app name.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
===========
settings.py
===========

The resources provided here provide the merged default and custom options
in a Namespace named &amp;quot;config&amp;quot;. See near the end of this module.

Example::

   from app.settings import config
   ...
   some_option = config.SOME_OPTION
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;runpy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;types&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt;

&lt;span class="c1"&gt;# This environment var, if set, should be the path (absolute or relative) to a&lt;/span&gt;
&lt;span class="c1"&gt;# Python file that overrides some of the default options from&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;quot;defaultoptions.py&amp;quot;.&lt;/span&gt;
&lt;span class="n"&gt;CUSTOM_OPTIONS_ENVVAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;APP_CUSTOM_OPTIONS&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keep_upper_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_dict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Remove disallowed option names&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;name_rejected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;True if not an allowed option name.
        Legal names are:
        - All uppercases with potential &amp;quot;_&amp;quot; or [0..9] inside
        - Don't start with &amp;quot;_&amp;quot;
        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="c1"&gt;# Remove &amp;quot;illegal&amp;quot; option names.&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options_dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name_rejected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;options_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="c1"&gt;# This is the default options dict&lt;/span&gt;
&lt;span class="n"&gt;default_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;defaultoptions&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;keep_upper_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# This will build the &amp;quot;custom_options&amp;quot; dict&lt;/span&gt;
&lt;span class="n"&gt;custom_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;custom_options_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CUSTOM_OPTIONS_ENVVAR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;custom_options_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;custom_options_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pathlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom_options_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;custom_options_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_file&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;custom_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;runpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom_options_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;keep_upper_names&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;custom_options_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; found. Fix or remove env var &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;CUSTOM_OPTIONS_ENVVAR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ne"&gt;ResourceWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# And finally the object that exposes the custom options merged with the default&lt;/span&gt;
&lt;span class="c1"&gt;# ones as attributes.&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SimpleNamespace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;default_options&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;custom_options&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="okay-time-for-the-demo"&gt;
&lt;h2&gt;Okay, time for the demo&lt;/h2&gt;
&lt;p&gt;If you copied exactly the files layout and contents, you may proceed to the demo, otherwise you should adapt what follows to your app layout and names.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;cd to the parent directory (the one that contains the &lt;tt class="docutils literal"&gt;app/&lt;/tt&gt; directory) and execute the command:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;python app&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This should display:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Hello, this is the main entry point.
Default value for option 1
Any Python object
{'key': 'anything'}
&lt;/pre&gt;
&lt;p&gt;You have seen the default values of three options. Now let's start a custom configuration. Create in the same directory a &lt;tt class="docutils literal"&gt;customoptions.py&lt;/tt&gt; file with only this line:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;OPTION_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Custom value for option 1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We can now &amp;quot;tell&amp;quot; the app to use the custom options redefined in this file:&lt;/p&gt;
&lt;pre class="code console literal-block"&gt;
&lt;span class="go"&gt;APP_CUSTOM_OPTIONS=customoptions.py python app&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now this displays:&lt;/p&gt;
&lt;pre class="code text literal-block"&gt;
Hello, this is the main entry point.
Custom value for option 1
Any Python object
{'key': 'anything'}
&lt;/pre&gt;
&lt;p&gt;As you can notice, this only changed the value of &lt;tt class="docutils literal"&gt;OPTION_1&lt;/tt&gt; when the other options keep their default value.&lt;/p&gt;
&lt;div class="admonition attention"&gt;
&lt;p class="first admonition-title"&gt;Attention!&lt;/p&gt;
&lt;p class="last"&gt;The examples work as is with Python 3.6 and up. Using an older Python version down to Python 2.7 may require some changes (no pathlib, fo f-strings, etc.)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category><category term="Configuration"></category></entry><entry><title>Find the last iteration</title><link href="http://glenfant.github.io/find-the-last-iteration.html" rel="alternate"></link><published>2017-09-16T13:01:00+02:00</published><updated>2017-09-16T13:01:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2017-09-16:/find-the-last-iteration.html</id><summary type="html">&lt;p class="first last"&gt;Find the last iteration on any iterable object&lt;/p&gt;
</summary><content type="html">&lt;p&gt;It's sometimes useful to determine where's the last iteration on an iterable object.&lt;/p&gt;
&lt;p&gt;Doing this on a sized object is pretty easy. You just need to get the &lt;tt class="docutils literal"&gt;len()&lt;/tt&gt; of the container object you're looking over, learn &lt;tt class="docutils literal"&gt;enumerate&lt;/tt&gt; and just:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obj_len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;do_stuff_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Special for last item&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;obj_len&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;do_play_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That's OK in situations where you can count the iterations before entering in a loop, but what if the &lt;tt class="docutils literal"&gt;obj&lt;/tt&gt; your code is looping over is not &lt;a class="reference external" href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sized"&gt;Sized&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;This generator comes to the rescue and will notify the last iteration over any iterable object.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;notify_last_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Iterates over an iterable of items and yields a 2 tuple contaning
    (is_last, item).  `is_last` being True when last item is yielded

    :param iterable: iterable or iterator
    :yield: (is_last, item) tuple

    &amp;gt;&amp;gt;&amp;gt; seq = range(4)
    &amp;gt;&amp;gt;&amp;gt; list(notify_last_item(seq))
    [(False, 0), (False, 1), (False, 2), (True, 3)]
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Belt + braces&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Pull 1st value&lt;/span&gt;
    &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Pull 1st value&lt;/span&gt;

    &lt;span class="c1"&gt;# Run iterator to exhaustion&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;
        &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# Report the last value&lt;/span&gt;
    &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now for a simple demo:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# Not sizeable&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;is_last_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;notify_last_item&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_last_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Outputs:&lt;/span&gt;
&lt;span class="c1"&gt;# False 0&lt;/span&gt;
&lt;span class="c1"&gt;# False 1&lt;/span&gt;
&lt;span class="c1"&gt;# False 2&lt;/span&gt;
&lt;span class="c1"&gt;# False 3&lt;/span&gt;
&lt;span class="c1"&gt;# True 4&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Any comment for improvements or others are welcome...&lt;/p&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category></entry><entry><title>Test the latest Docker with Vagrant</title><link href="http://glenfant.github.io/test-latest-docker-with-vagrant.html" rel="alternate"></link><published>2017-09-15T10:57:00+02:00</published><updated>2017-09-15T10:57:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2017-09-15:/test-latest-docker-with-vagrant.html</id><summary type="html">&lt;p class="first last"&gt;Play with the freshest Docker on MacOS or Windows&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Want to experiment the latest Docker CE features on Linux when you have a MacOS or Windows box? Or just want to learn Docker in a sandbox?&lt;/p&gt;
&lt;p&gt;Here is a simple &lt;tt class="docutils literal"&gt;Vagrantfile&lt;/tt&gt; that will make your day. Just &lt;tt class="docutils literal"&gt;vagrant up&lt;/tt&gt; (wait some minutes), then &lt;tt class="docutils literal"&gt;vagrant ssh&lt;/tt&gt; and you're done.&lt;/p&gt;
&lt;p&gt;Ah! There's a goodie: The file sharing is supported by NFS on MacOS and SMB on Windows. Both provide faster file sync than the default VBoxFS.&lt;/p&gt;
&lt;p&gt;Comments, pull requests and any improvement suggestions are welcome.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/7772f48aa17eb4e09d4a62390825eade.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Docker playground for MacOS and Windows
# =======================================
#
# - Installs the latest Docker + Docker-compose
# - Uses faster NFS files sync on Mac OS
# - Uses faster SMB files share on Windows
#
# Installation steps:
#
# - Install lates Virtualbox and its guest extensions pack
#   https://www.virtualbox.org/wiki/Downloads
# - Install Vagrant
#   https://www.vagrantup.com/
# - cd /where/you/want
# - cp Vagrantfile .
# - vagrant up
#   (you will be prompted for your sudo password when vagrant tunes nfs config)
# - vagrant ssh
#
# Quick check the installation in a shell of the guest Ubuntu VM:
#
# - docker run hello-world
# -------------------------------

module OS
  def OS.macos?
      (/darwin/ =~ RbConfig::CONFIG['host_os']) != nil
  end
  def OS.windows?
      File::SEPARATOR == '\\'
  end
  def OS.unix?
      !OS.windows?
  end
  # Lazy guess, it could be a xBSD
  def OS.linux?
      OS.unix? and not OS.macos?
  end
end

# Docker stuff provisioning shell scripts

USER = 'vagrant'

# Read https://docs.docker.com/engine/installation/linux/ubuntu/
# for more options
DOCKER_INSTALL_LATEST = &lt;&lt;-END_SCRIPT
sudo apt-get update

echo "Installing base software"
sudo apt-get -y install \
    nfs-common \
    python-software-properties \
    apt-transport-https \
    ca-certificates \
    curl \
    python3-pip \
    software-properties-common &gt; /dev/null 2&gt;&amp;1
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable"
sudo apt-get update

echo "Installing Docker bundle"
sudo apt-get -y install docker-ce &gt; /dev/null 2&gt;&amp;1
sudo usermod -a -G docker #{USER}

echo "Installing Docker-compose"
sudo pip3 install -U pip
sudo pip3 install docker-compose
END_SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "bento/ubuntu-16.04"
  if OS.unix?
    config.vm.network "private_network", type: "dhcp"
    config.vm.synced_folder ".", "/vagrant", type: "nfs"
  else
    # OS.windows? -&gt; true
    config.vm.synced_folder ".", "/vagrant", type: "smb"
  end
  config.vm.provider "virtualbox" do |vb|
    vb.memory = "2048"
  end
  config.vm.provision "shell", inline: DOCKER_INSTALL_LATEST
end
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Exits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.vagrantup.com/"&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Blog"></category><category term="Vagrant"></category><category term="Docker"></category><category term="MacOS"></category><category term="Windows"></category></entry><entry><title>"Flatten" nested loops</title><link href="http://glenfant.github.io/flatten-nested-loops.html" rel="alternate"></link><published>2017-07-31T17:01:00+02:00</published><updated>2017-07-31T17:01:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2017-07-31:/flatten-nested-loops.html</id><summary type="html">&lt;p class="first last"&gt;One loop in place of x nested loops&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Nested loops are a common pattern in programmation in most programming languages. In Python,
nested loops that have a long body must indent at each loop, that's wastes screen space and hides
the fact the code is in an unique loop.&lt;/p&gt;
&lt;p&gt;In addition, &lt;tt class="docutils literal"&gt;break&lt;/tt&gt; statements in the outermost loop will continue with the next parent loop.
If the intent is to break the outermost loop, the programmer needs to include these nested loops
in an outer &lt;tt class="docutils literal"&gt;try ... except&lt;/tt&gt; structure that adds one more indentation level, or add a loop logic control.&lt;/p&gt;
&lt;p&gt;This recipe can be used in most cases you need nested loops that are merged in one. The &amp;quot;black
magic&amp;quot;: merge the looping logic in a &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0289/#reduction-functions"&gt;generator expression&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;must_break_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;must_break_all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;must_break_all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;lots_of_data_processing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we_must_stop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;must_break_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
             &lt;span class="n"&gt;other_data_processing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# End all iterations&lt;/span&gt;
&lt;span class="n"&gt;doing_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ugly, isn't it?&lt;/p&gt;
&lt;p&gt;In place of this I prefer use a generator expression that merges the looping logic, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;merged_looping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable1&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable2&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;merged_looping&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lots_of_data_processing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we_must_stop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
     &lt;span class="n"&gt;other_data_processing&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# End all iterations&lt;/span&gt;
&lt;span class="n"&gt;doing_something_else&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And yes, you can put any number of consistent &lt;tt class="docutils literal"&gt;for&lt;/tt&gt; expressions in one generator expression.&lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exhausted generator&lt;/strong&gt;&lt;/p&gt;
&lt;p class="last"&gt;You can't re-use &lt;tt class="docutils literal"&gt;merged_looping&lt;/tt&gt; as is after the last line of this example because it is
potentially exhausted.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category></entry><entry><title>From dotted name to object</title><link href="http://glenfant.github.io/from-str-to-obj.html" rel="alternate"></link><published>2017-07-31T13:01:00+02:00</published><updated>2017-07-31T13:01:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2017-07-31:/from-str-to-obj.html</id><summary type="html">&lt;p class="first last"&gt;Make an object drom a simple dotted name&lt;/p&gt;
</summary><content type="html">&lt;p&gt;It is sometimes useful to be in position to select an arbitrary Python global object from a config file or some command line option. Things like this are called &amp;quot;dotted names&amp;quot;.&lt;/p&gt;
&lt;p&gt;That helper is a small undocumented treasure hidden in the stdlib &lt;tt class="docutils literal"&gt;pydoc&lt;/tt&gt; module called
&lt;tt class="docutils literal"&gt;locate&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydoc&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;MY_PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pydoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;locate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;math.pi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;MY_PI&lt;/span&gt;
&lt;span class="go"&gt;3.141592653589793&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;MY_PI&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enjoy...&lt;/p&gt;
</content><category term="Blog"></category><category term="Python"></category><category term="Tip"></category></entry><entry><title>Switching to Pelican</title><link href="http://glenfant.github.io/switching-to-pelican.html" rel="alternate"></link><published>2016-03-19T16:00:00+01:00</published><updated>2016-03-19T16:00:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2016-03-19:/switching-to-pelican.html</id><summary type="html">&lt;p class="first last"&gt;Why I decided to migrate to Pelican&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;I decided few days ago to revive my &lt;a class="reference external" href="http://glenfant.wordpress.com"&gt;ooold Wordpress site&lt;/a&gt; that's still opened in a brand new site, and import in it my old - and sometimes outdated - articles.&lt;/p&gt;
&lt;p&gt;Several good solutions are possible, my requirements are :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I need a static site generator such I could host it anywhere for cheap, while keeping its source content in a SCM - Github as it happens - with an easy deplonyment tool.&lt;/li&gt;
&lt;li&gt;I need to write my site in &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; since I prefer its approach over Markdown or others. This limits my choice of static site generators to the ones coded in the Python language.&lt;/li&gt;
&lt;li&gt;I need something that's blog oriented. I'm familiar with &lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/index.html"&gt;Sphinx&lt;/a&gt; but it is too much &amp;quot;software documentation&amp;quot; oriented.&lt;/li&gt;
&lt;li&gt;I need something that's actively maintained by a nice community.&lt;/li&gt;
&lt;li&gt;I need something simple, and &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt; is a good candidate but is somehow overkill for what I need, and as a consequence, its basic setup is somehow too complicated to my poor lazy and tired brain. But perhaps I'll change my opinion one day if I need some feature Nikola provides.&lt;/li&gt;
&lt;li&gt;I need something that provides a tool that imports content from other blogs. Pelican does a very good job, and I just needed to change links to moved media files.&lt;/li&gt;
&lt;li&gt;I need something which theme can be easily customized. Though I keep at the moment one of the builtin themes, I'll change it in a near future to a more personal choice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So ! Welcome to my new &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; powered site.&lt;/p&gt;
</content><category term="Blog"></category><category term="Blog"></category></entry><entry><title>Build a WSGI script for mod_wsgi from zc.buildout</title><link href="http://glenfant.github.io/build-a-wsgi-script-for-mod_wsgi-from-zc-buildout.html" rel="alternate"></link><published>2013-06-29T14:46:00+02:00</published><updated>2013-06-29T14:46:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2013-06-29:/build-a-wsgi-script-for-mod_wsgi-from-zc-buildout.html</id><summary type="html">&lt;p class="first last"&gt;How to create automatically a WSGI script from a zc.buildout config with correct sys.path setup.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;While building a &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; application with
&lt;a class="reference external" href="https://pypi.python.org/pypi/zc.buildout/"&gt;zc.buildout&lt;/a&gt;, I have been
searching a way to build the script for Apache's &lt;a class="reference external" href="https://code.google.com/p/modwsgi/"&gt;mod_wsgi&lt;/a&gt; directly from the buildout command.&lt;/p&gt;
&lt;p&gt;Being brain dumb, having other emergencies, and being a lazy programmer, I
asked to &lt;a class="reference external" href="http://stackoverflow.com/questions/12836832/building-the-wsgi-script-for-flask-with-zc-buildout"&gt;stackoverflow for some hints&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My fellow &lt;a class="reference external" href="http://www.gawel.org/"&gt;Gaël Pasgrimaud&lt;/a&gt; suggests using
&lt;a class="reference external" href="https://pypi.python.org/pypi/collective.recipe.modwsgi/"&gt;collective.recipe.modwsgi&lt;/a&gt;
but I did not want to add the &lt;a class="reference external" href="http://pythonpaste.org/deploy/"&gt;PasteDeploy monster&lt;/a&gt;
to my software stack.&lt;/p&gt;
&lt;p&gt;So I took time to hack &lt;a class="reference external" href="https://pypi.python.org/pypi/zc.recipe.egg/2.0.0"&gt;zc.recipe.egg&lt;/a&gt; and find how it creates
custom scripts. Et voilà...&lt;/p&gt;
&lt;p&gt;I found a way to create my custom &lt;strong&gt;wsgi script&lt;/strong&gt; just using the great
&lt;a class="reference external" href="https://pypi.python.org/pypi/z3c.recipe.runscript"&gt;z3c.recipe.runscript&lt;/a&gt;,
I already use for other purposes in various projects.
&lt;tt class="docutils literal"&gt;z3c.recipe.runscript&lt;/tt&gt; is a great piece of software that helps
creating your own custom small recipes when you don't find what you need
in Pypi or have time to create a real zc.buildout recipe. Here are the
snips you need to do the same in your project :&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-snip-of-buildout-cfg"&gt;
&lt;h2&gt;A snip of buildout.cfg&lt;/h2&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/5890957.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;[wsgiscript]
 
# Build the wsgi script for mod_wsgi
recipe = z3c.recipe.runscript
install-script = ${buildout:directory}/buildouthelpers.py:make_wsgi_script
update-script = ${:install-script}
 
# Parameters
egg = egg.with.wsgiapp
script = ${buildout:parts-directory}/wsgiscript/myapp.wsgi
app = egg.with.wsgiapp.appobject
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;!-- [gist https://gist.github.com/glenfant/5890957 /] --&gt;
&lt;p&gt;The three parameters expected from this custom part are :&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;egg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The egg name that contains the wsgi app code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;script&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The full path to the wsgi script that will &amp;nbsp;be generated, the same path
should sit to the right of
the &lt;a class="reference external" href="https://code.google.com/p/modwsgi/wiki/ConfigurationDirectives#WSGIScriptAlias"&gt;WSGIScriptAlias&lt;/a&gt;&amp;nbsp;in
your Apache config.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;app&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Python name of the application object in the above mentioned egg.&lt;/p&gt;
&lt;p&gt;And the snip of above referenced &lt;strong&gt;buildouthelpers.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/5890964.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;WSGISCRIPT_TEMPLATE = """\
# -*- coding: utf-8 -*-
import sys
import os

sys.path[0:0] = [
{0}
]

_application = None

def application(environ, start_response):
    global _application
    # Potential app environment setup
    if _application is None:
        from {1} import {2} as _application
    return _application(environ, start_response)
"""

def make_wsgi_script(recipe, buildout):
    """Build the script for Apache/mod_wsgi
    """
    # Late import: zc.recipe.egg may not be installed when executing 1st
    # function
    from zc.recipe.egg.egg import Eggs
    app_egg = recipe['egg']
    wsgi_filepath = recipe['script']
    app_mod, app_obj = recipe['app'].rsplit('.', 1)  # 'a.b.c.d' -&gt; 'a.b.c', 'd'

    reqs, ws = Eggs(buildout, app_egg, recipe).working_set()
    egg_paths = [pkg.location for pkg in ws]
    src_egg_paths = ',\n'.join(["    '{0}'".format(path) for path in egg_paths])
    with open(wsgi_filepath, 'w') as fh:
        fh.write(WSGISCRIPT_TEMPLATE.format(src_egg_paths, app_mod, app_obj))
    return
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
&lt;p&gt;Some assumptions without which none of this works:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your wsgi app sits in the &lt;strong&gt;egg.with.wsgiapp&lt;/strong&gt; egg.&lt;/li&gt;
&lt;li&gt;This&amp;nbsp;&lt;strong&gt;egg.with.wsgiapp&lt;/strong&gt; egg is installed in another buildout part
using &lt;strong&gt;zc.recipe.egg&lt;/strong&gt; recipe (or another one that relies on it),
and this part is executed &lt;strong&gt;before [wsgiscript]&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;All requirements for &lt;strong&gt;egg.with.wsgiapp&lt;/strong&gt; must sit in its &lt;strong&gt;setup()&lt;/strong&gt;
parameter &lt;strong&gt;install_requires&lt;/strong&gt; and not in a pip requirements file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hope this will help others who fell in a similar situation. Any question
or improvement suggestion is welcome.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Buildout"></category><category term="Python"></category></entry><entry><title>The zen of logging and YAML</title><link href="http://glenfant.github.io/the-zen-of-logging-and-yaml.html" rel="alternate"></link><published>2012-12-22T15:07:00+01:00</published><updated>2012-12-22T15:07:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2012-12-22:/the-zen-of-logging-and-yaml.html</id><summary type="html">&lt;p class="first last"&gt;A Python logging configuration in YAML&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Python 2.7 and 3.2 come with a new way to configure the Python logging
services with a standard dict. Is there a better way to let an user
provide a dict than YAML ?&lt;/p&gt;
&lt;p&gt;ConfigParser ? Uh ! Not sure. In addition, YAML provides OOTB lists,
aliases, and even arbitrary Python objects.&lt;/p&gt;
&lt;p&gt;Just having got the zen of complex logging and YAML, I write this self
explanatory recipe for my memory and anyone who want to configure a
complex logging with only some lines of Python. Any comment, question,
improvement suggestion is welcome.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/4358668.js'&gt;&lt;/script&gt;
    &lt;noscript&gt;
        &lt;pre&gt;&lt;code&gt;# -*- coding: utf-8
"""\
A simple demo of logging configuration with YAML (Python 2.7)
=============================================================

Requires PyYAML -&gt; "easy_install PyYAML"

See the recipes for configuring logging with dicts and YAML
- http://docs.python.org/2.7/howto/logging-cookbook.html
- http://stackoverflow.com/questions/10519392/python2-7-logging-configuration-with-yaml
"""

import logging
import logging.config
import yaml
import StringIO

# Should be a config file in real app

YAML_CONF = """\
%YAML 1.2
---
# Config  for my application
# --------------------------
myapp:
  foo: bar
  bar: [1, 2]

# Config for logging
# ------------------
# See http://docs.python.org/2.7/library/logging.config.html#configuration-dictionary-schema

logging:
  version: 1
  disable_existing_loggers: true

  # Configuring the default (root) logger is highly recommended

  root:
    level: !!python/name:logging.NOTSET
    handlers: [console]

  loggers:

    # Logging from my application

    myapp.lib:
      level: !!python/name:logging.WARN
      handlers: [logfile]
      qualname: myapp.lib
      propagate: false
    myapp.cli:
      level: !!python/name:logging.WARN
      handlers: [console]
      qualname: myapp.cli
      propagate: false

    # Controlling logging of 3rd party libs

    sqlalchemy.engine:
      level: !!python/name:logging.WARN
      handlers: [logfile]
      qualname: sqlalchemy.engine
      propagate: false
    sqlalchemy.pool:
      level: !!python/name:logging.WARN
      handlers: [logfile]
      qualname: sqlalchemy.pool
      propagate: false

  handlers:
    logfile:
      class: logging.FileHandler
      filename: sample.log
      formatter: simpleFormatter
      level: !!python/name:logging.NOTSET
    console:
      class: logging.StreamHandler
      stream: ext://sys.stdout
      formatter: simpleFormatter
      level: !!python/name:logging.NOTSET

  formatters:
    simpleFormatter:
      class: !!python/name:logging.Formatter
      format: '%(name)s %(asctime)s %(levelname)s %(message)s'
      datefmt: '%d/%m/%Y %H:%M:%S'
"""

# Loading config. Of course this is in another file in the real life

global_config = yaml.load(StringIO.StringIO(YAML_CONF))

# Configuring logging with the subset of the dict
#

logging.config.dictConfig(global_config['logging'])

# Using explicitely the root logger always logs to the console

logging.info("This is an info of the root logger")

# The unconfigured loggers are captured by the root logger (-&gt; console)

unconfigured_logger = logging.getLogger('unconfigured')
unconfigured_logger.info("This is an info from an unknown / unconfigured source")

# Logging from myapp.cli

myapp_cli_logger = logging.getLogger('myapp.cli')
myapp_cli_logger.info("This is an info from myapp.cli")  # Not recorded
myapp_cli_logger.warning("This is a warning from myapp.cli")  # -&gt; console

# Logging from myapp.lib

myapp_lib_logger = logging.getLogger('myapp.lib')
myapp_lib_logger.info("This is an info from myapp.lib")  # Not recorded
myapp_lib_logger.warning("This is a warning from myapp.lib")  # -&gt; sample.log

# Controlling logs from 3rd party libs

sqla_logger = logging.getLogger('sqlalchemy.engine')
sqla_logger.info("This is an info from SQLAlchemy")  # Not recorded
sqla_logger.warning("This is a warning from SQLAlchemy")  # -&gt; sample.log

print "Now look at the file 'sample.log'"
&lt;/code&gt;&lt;/pre&gt;
    &lt;/noscript&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Python"></category></entry><entry><title>Step debugging a Zope 2 / Plone instance with Eclipse + PyDev</title><link href="http://glenfant.github.io/step-debugging-zope-eclipse-pydev.html" rel="alternate"></link><published>2011-11-07T01:02:00+01:00</published><updated>2011-11-07T01:02:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2011-11-07:/step-debugging-zope-eclipse-pydev.html</id><summary type="html">&lt;p class="first last"&gt;Step debug and objects inspection of a live Plone site with Eclipse / Pydev&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Most power users mays already know this. But this is a real
enlightenment for newbies who are stuck with the command line pdb
utility. Even for experienced developper as I am... supposed to be, this
is a real advantage to have on screen at the same time the source code,
with breakpoints in the margin of it, the inspector for your global and
local variables, the access to the call stack and execution frames.&lt;/p&gt;
&lt;p&gt;Start reading &lt;a class="reference external" href="http://www.pydev.org/manual_adv_remote_debugger.html"&gt;the fine manual
here&lt;/a&gt; and come
back reading how to get this in Zope 2.&lt;/p&gt;
&lt;p&gt;Of course I assume you have a recent Eclipse (Indigo) and Pydev (2.2.4)&lt;/p&gt;
&lt;p&gt;Find in your Eclipse software directory the full path of the directory
that contains &lt;tt class="docutils literal"&gt;pydevd.py&lt;/tt&gt;. In other words :&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /your/eclipse/root
&lt;span class="gp"&gt;$&lt;/span&gt; find . -name &lt;span class="s1"&gt;&amp;#39;pydevd.py&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my MacBook the file is found in
&lt;tt class="docutils literal"&gt;/Developer/eclipse/plugins/org.python.pydev.debug\_2.2.4.2011110216/pysrc&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;(note that upgrades of PyDev may change this path to something else)&lt;/p&gt;
&lt;p&gt;Edit your development buildout config file and add this in your
plone.recipe.zope2instance part:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[instance]&lt;/span&gt;
&lt;span class="na"&gt;recipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;plone.recipe.zope2instance&lt;/span&gt;
&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="na"&gt;extra-paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    /Developer/eclipse/plugins/org.python.pydev.debug_2.2.4.2011110216/pysrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course re-run your buildout. Open the debug perspective in Eclipse
and start the PyDev debugger server (see link above).&lt;/p&gt;
&lt;p&gt;You can now add anywhere you want (need) the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pydevd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;pydevd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or create and useuse the shortcut &amp;quot;pydevd&amp;quot; to insert your first hard breakpoint.&lt;/p&gt;
&lt;p&gt;Start your Zope instance and make the necessary clicks to execute the line
that has the hard breakpoint. Wow, great : the next line of Python to be
executed is hilited from there, you cand step, step over, go to the next
return, and even add soft breakpoint double clicking in the left margin
anywhere in your source code.&lt;/p&gt;
&lt;p&gt;All other things you may need to know about debugging with PyDev &lt;a class="reference external" href="http://www.pydev.org/manual_adv_debugger.html"&gt;are here&lt;/a&gt; and usable &amp;quot;as is&amp;quot; in a
Zope server.&lt;/p&gt;
&lt;p&gt;Another great feature for those who develop with Windows: when debugging with
Eclipse/Pydev you can start your development instance as a service, when
before you needed to run the sloooooow &amp;quot;instance fg&amp;quot; and benefit of Eclipse
remote debugging.&lt;/p&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category></entry><entry><title>Bootstrap and install a buildout based project without Internet connection</title><link href="http://glenfant.github.io/bootstrap-and-install-a-buildout-based-project-without-internet-connection.html" rel="alternate"></link><published>2011-07-31T20:30:00+02:00</published><updated>2011-07-31T20:30:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2011-07-31:/bootstrap-and-install-a-buildout-based-project-without-internet-connection.html</id><summary type="html">&lt;p class="first last"&gt;How can you deploy a zc.buildout project without an Internet connection on the target host.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Complex Python based solutions are now built with the great
&lt;strong&gt;zc.buildout&lt;/strong&gt;, like complicated ZEO clusters with heavily customized
Plone site or others.&lt;/p&gt;
&lt;p&gt;zc.buildout is a great solution that's now essential to share among developers
a custom project as well as for distributing to users or customers. As
everybody know, zc.buildout grabs components from the Internet (mostly from
the Pypi site) and makes the application assembling those components according
to the integration directives in the various &lt;tt class="docutils literal"&gt;*.cfg&lt;/tt&gt; files. But talking
about zc.buildout in details in not the purpose of this blog post of course.&lt;/p&gt;
&lt;p&gt;Installing the solution in the customer's computers is supposed to be
easy and straightforward. &amp;quot;Unfortunately&amp;quot;, running zc.buildout requires
to bootstrap the project with the famous
&amp;quot;&lt;a class="reference external" href="http://svn.zope.org/repos/main/zc.buildout/trunk/bootstrap/bootstrap.py"&gt;bootstrap.py&lt;/a&gt;&amp;quot;
file.&lt;/p&gt;
&lt;p&gt;This script downloads and installs some essential resources that enable to run
the &amp;quot;bin/buildout&amp;quot; command, like &lt;a class="reference external" href="http://pypi.python.org/pypi/distribute"&gt;distribute&lt;/a&gt; and &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;zc.buildout&lt;/a&gt; itself. But with some customers,
there is no possible Internet connection on the installation target, due to a
strict security policy. And I don't want to write a complicated installation
manual that works around this issue. In addition, these customer have little
or no IT required skills.&lt;/p&gt;
&lt;p&gt;After asking to some experts in the Plone mailing lists, some answers provided
some pointers from which I made my &amp;quot;&lt;a class="reference external" href="http://plone.fr/Members/glenfant/offline_bootstrap.py/view"&gt;offline_bootstrap.py&lt;/a&gt;&amp;quot; script that
must be used in place of the classical &amp;quot;bootstrap.py&amp;quot; script in such
situations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The solution&lt;/h2&gt;
&lt;div class="section" id="prepare-your-buildout-structure"&gt;
&lt;h3&gt;Prepare your buildout structure&lt;/h3&gt;
&lt;p&gt;In particular, you must ensure that your &amp;quot;buildout.cfg&amp;quot; file has these
options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# All packages are downloaded locally.&lt;/span&gt;
&lt;span class="na"&gt;download-cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;downloads&lt;/span&gt;
&lt;span class="c1"&gt;# All eggs are installed here&lt;/span&gt;
&lt;span class="na"&gt;eggs-directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;eggs&lt;/span&gt;
&lt;span class="c1"&gt;# You need this if there is an &amp;quot;extends = http://...&amp;quot;&lt;/span&gt;
&lt;span class="na"&gt;extends-cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;ext-cache&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;versions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;[versions]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Freeze your zc.buildout preferred version!&lt;/span&gt;
&lt;span class="na"&gt;zc.buildout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;x.y.z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add to the buildout directory the &lt;a class="reference external" href="http://plone.fr/Members/glenfant/offline_bootstrap.py/view"&gt;&amp;quot;offline_bootstrap.py&amp;quot; script you
can grab
here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From the same place add a &amp;quot;&lt;strong&gt;bootstrap_resources/&lt;/strong&gt;&amp;quot; directory. In
this directory, add:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;&lt;a class="reference external" href="http://python-distribute.org/distribute_setup.py"&gt;distribute_setup.py&lt;/a&gt;&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;strong&gt;distribute-x.y.z.tar.gz&lt;/strong&gt;&amp;quot;. &lt;em&gt;Important&lt;/em&gt;: Use the same version as the one
indicated by the &lt;strong&gt;DEFAULT_VERSION&lt;/strong&gt; in above mentioned
&amp;quot;&lt;strong&gt;distribute_setup.py&lt;/strong&gt;&amp;quot;. &lt;a class="reference external" href="http://pypi.python.org/pypi/distribute"&gt;Find it from here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&amp;quot;&lt;strong&gt;zc.buildout-x.y.z.tar.gz&lt;/strong&gt;&amp;quot;. &lt;em&gt;Important&lt;/em&gt;: Use exactly the same version as
the one pinned in your &amp;quot;&lt;strong&gt;buildout.cfg&lt;/strong&gt;&amp;quot; as above described. &lt;a class="reference external" href="http://pypi.python.org/pypi/zc.buildout"&gt;Find it from
here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From now you can bootstrap your zc.buildout and carry on developing / testing
/ documenting your Python project as usual.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-in-an-no-internet-platform"&gt;
&lt;h2&gt;Installing in an no-Internet platform&lt;/h2&gt;
&lt;p&gt;Your beautiful project is ready to be installed in a customer computer that
has no connection to the Internet. First add a new file in your buildout:
&amp;quot;&lt;strong&gt;production_install.cfg&lt;/strong&gt;&amp;quot; with these few lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;production.cfg&lt;/span&gt;
&lt;span class="na"&gt;install-from-cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;offline&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;newest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, I assume you made a &amp;quot;&lt;strong&gt;production.cfg&lt;/strong&gt;&amp;quot; buildout profile that
smiles on your integration platform.&lt;/p&gt;
&lt;p&gt;You may now remove the database (typically the &amp;quot;&lt;strong&gt;var/&lt;/strong&gt;&amp;quot; folder) from the
buildout directory and make a tarball.&lt;/p&gt;
&lt;p&gt;Inflate this tarball in the place your customer wants it on his computer. From
the newly created folder, you just need to say this to the console:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; python offline_bootstrap.py -c production_install.cfg
&lt;span class="gp"&gt;$&lt;/span&gt; bin/buildout -c production_install.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be all unless other application specific operations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-things-about-offline-bootstrap-py"&gt;
&lt;h2&gt;Other things about &amp;quot;offline_bootstrap.py&amp;quot;&lt;/h2&gt;
&lt;p&gt;&amp;quot;&lt;strong&gt;offline_bootstrap.py&lt;/strong&gt;&amp;quot; accepts any option and argument the usual
&amp;quot;&lt;strong&gt;bootstrap.py&lt;/strong&gt;&amp;quot; takes. Except &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--setup-source&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--download-base&lt;/span&gt;&lt;/tt&gt; that
&lt;strong&gt;are set specifically by offline_bootstrap.py&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-or-comments"&gt;
&lt;h2&gt;Questions or comments ?&lt;/h2&gt;
&lt;p&gt;... are welcome.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Buildout"></category></entry><entry><title>ZCML Wadda ? Want a live ZCML doc ?</title><link href="http://glenfant.github.io/zcml-wadda-want-a-live-zcml-doc.html" rel="alternate"></link><published>2011-04-20T16:54:00+02:00</published><updated>2011-04-20T16:54:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2011-04-20:/zcml-wadda-want-a-live-zcml-doc.html</id><summary type="html">&lt;p class="first last"&gt;How to get the ZCML doc that fits your zope instance&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;ZCML is a great feature in Zope 2 since the first Five years. Exploring
a well designed Python package starts with its ZCML files and its main
&amp;quot;interfaces.py&amp;quot; module.&lt;/p&gt;
&lt;p&gt;But newbies as I have been and others have pain to remember the various
ZCML directives available, as well as the detailed attributes of them.&lt;/p&gt;
&lt;p&gt;Of course there are some documentations in printed books or in various
blogs or docs about most directives. But there's no central point
(unless I didn't search correctly) where you can read the documentation
for all ZCML directives available in &lt;strong&gt;your&lt;/strong&gt; Zope 2 instance with third
party components that could add new ZCML vocabulary.&lt;/p&gt;
&lt;p&gt;Of course, you may grep all &amp;quot;meta.zcml&amp;quot; files in your instance, search
for the appropriate namespace, then the appropriate directive. And
finally open the Python file that defines the schema of the mysterious
ZCML, just as I explained in &lt;a class="reference external" href="http://glenfant.wordpress.com/2008/05/09/doing-my-zcml/"&gt;another ZCML related blog
post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Grepping the &amp;quot;zope.configuration&amp;quot;, I hopefully found a magic function
that provides a structured tree of all the registered ZCML directives
well suited to provide a live documentation.&lt;/p&gt;
&lt;p&gt;After some hours of work and exploration, I'm proud to give to the Zope
2 community
&amp;quot;&lt;a class="reference external" href="http://pypi.python.org/pypi/aws.zope2zcmldoc"&gt;aws.zope2zcmldoc&lt;/a&gt;&amp;quot;
that provides a live documentation on all ZCML namespaces, directives
and subdirectives installed in your Zope 2 instance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="some-screenshots"&gt;
&lt;h2&gt;Some screenshots&lt;/h2&gt;
&lt;div class="figure"&gt;
&lt;img alt="Available from the standard Zope control panel" src="http://glenfant.github.io/images/zcmldoc-control-panel.png" /&gt;
&lt;p class="caption"&gt;Available from the standard Zope control panel&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="All namespaces" src="http://glenfant.github.io/images/zcmldoc-all-namespaces.png" /&gt;
&lt;p class="caption"&gt;All namespaces&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="The &amp;quot;browser&amp;quot; namespace" src="http://glenfant.github.io/images/zcmldoc-browser-namespace.png" /&gt;
&lt;p class="caption"&gt;The &amp;quot;browser&amp;quot; namespace&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="The &amp;quot;pages&amp;quot; directive" src="http://glenfant.github.io/images/zcmldoc-pages-directive.png" /&gt;
&lt;p class="caption"&gt;The &amp;quot;pages&amp;quot; directive&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;You can notice that the description text are translated in your favorite
language when the translation is available.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;aws.zope2zcmldoc&lt;/tt&gt; is the new companion of &lt;tt class="docutils literal"&gt;Products.DocFinderTab&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;plone.reload&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Products.Clouseau&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;zope2.zodbbrowser&lt;/tt&gt; (and perhaps
others I forgot, sorry) to your development instances.&lt;/p&gt;
&lt;p&gt;Any feedback, is welcome. &amp;nbsp;Enjoy !&lt;/p&gt;
&lt;p&gt;Ah yes, and many thanks to my actual employer &lt;a class="reference external" href="http://www.alterway.fr"&gt;Alter
Way&lt;/a&gt; for sponsoring this piece of software.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Frameworks"></category><category term="Zope 2"></category></entry><entry><title>Using ZODB3 3.8 with Plone 3</title><link href="http://glenfant.github.io/using-zodb3-3-8-with-plone-3.html" rel="alternate"></link><published>2010-12-18T16:08:00+01:00</published><updated>2010-12-18T16:08:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2010-12-18:/using-zodb3-3-8-with-plone-3.html</id><summary type="html">&lt;p class="first last"&gt;Use a safer ZODB back-end if you're stuck with Plone 3&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="background"&gt;
&lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;Lots of you are still in process of maintaining Plone 3 sites for yourself or
customers and didn't go to Plone 4 for some good reason.&lt;/p&gt;
&lt;p&gt;The Plone 3 bundle is powered and tested with the latest Zope 2.10. This Zope
version itself includes ZODB3 3.7. That has lots of issues that are now gone
with later versions.&lt;/p&gt;
&lt;p&gt;But wait, it's not possible to use ZODB3 3.10.x since it seems it requires
Python 2.6. ZODB3 3.9.x too has too many API changes and it seems that we need
to go to a full Zope 2.11 to support this lates version.&lt;/p&gt;
&lt;p&gt;ZODB3 3.8 seems a reasonable choice to improve the persistence support of your
Plone 3 apps.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It compiles with Python 2.4- It has a lot of new features&lt;/li&gt;
&lt;li&gt;It has a lot of bugfixes&lt;/li&gt;
&lt;li&gt;It has lots of additional tests, thus should be more reliable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have a look at
&lt;a class="reference external" href="http://pypi.python.org/pypi/ZODB3/3.8.6#whats-new-in-zodb-3-8-6-2010-09-21"&gt;http://pypi.python.org/pypi/ZODB3/3.8.6#whats-new-in-zodb-3-8-6-2010-09-21&lt;/a&gt;
to see all the details.&lt;/p&gt;
&lt;p&gt;This sample buildout extends the standard &amp;quot;buildout.cfg&amp;quot; that comes with the
ZopeSket template &amp;quot;plone3_buildout&amp;quot;, and replaces the ZODB3 that comes with
Zope 2.1.0 by the ZODB3 3.8.6 egg, as well as some Zope 2 components that need
an explicit upgrade to cope with this new ZODB3 version.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="c1"&gt;# buildout.cfg as built from plone3_buildout ZopeSkel template&lt;/span&gt;
&lt;span class="na"&gt;extends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;buildout.cfg&lt;/span&gt;
&lt;span class="na"&gt;eggs +&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    zope.proxy&lt;/span&gt;
&lt;span class="s"&gt;    ZODB3&lt;/span&gt;
&lt;span class="s"&gt;    zodbcode&lt;/span&gt;
&lt;span class="s"&gt;    tempstorage&lt;/span&gt;

&lt;span class="k"&gt;[zope2]&lt;/span&gt;
&lt;span class="na"&gt;skip-fake-eggs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    ZODB3&lt;/span&gt;
&lt;span class="s"&gt;    zope.proxy&lt;/span&gt;
&lt;span class="s"&gt;    zodbcode&lt;/span&gt;
&lt;span class="s"&gt;    tempstorage&lt;/span&gt;
&lt;span class="k"&gt;[versions]&lt;/span&gt;
&lt;span class="c1"&gt;# Marked as additional fake egg in [zope2]&lt;/span&gt;
&lt;span class="na"&gt;ZODB3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3.8.6&lt;/span&gt;
&lt;span class="na"&gt;zope.proxy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3.4&lt;/span&gt;
&lt;span class="na"&gt;zodbcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3.4.0&lt;/span&gt;
&lt;span class="na"&gt;tempstorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;2.11.3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="some-warnings-and-gotchas"&gt;
&lt;h2&gt;Some warnings and gotchas&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This configuration has been tested as simple instance deployment. I
didn't yet test a ZEO cluster in such situation.&lt;/li&gt;
&lt;li&gt;This configuration has been tested successfully with only some well
known third party extension : LinguaPlone, Collage, PloneFormgen,
Ploneboard. Some third party Plone extensions that may play with ZODB
inners should be tested in depth (run at least unit tests) before
going in production.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="other-things"&gt;
&lt;h3&gt;Other things&lt;/h3&gt;
&lt;p&gt;If something is going wrong with this new ZODB, you can go back to the
original ZODB3 that comes with Zope 2.10.x. Unless you have been playing with
new storages and options that come with ZODB3 3.8.&lt;/p&gt;
&lt;p&gt;Any feedback of others who tried this recipe or similar ones is welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category></entry><entry><title>Changing workflow state - quickly - on CMF/Plone content</title><link href="http://glenfant.github.io/changing-workflow-state-quickly-on-cmfplone-content.html" rel="alternate"></link><published>2010-04-02T08:31:00+02:00</published><updated>2010-04-02T08:31:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2010-04-02:/changing-workflow-state-quickly-on-cmfplone-content.html</id><summary type="html">&lt;p class="first last"&gt;It is sometimes useful to change the workflow state of a content item without invoking transitions ans their side effect&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="the-issue-with-workflow-states-and-transitions"&gt;
&lt;h2&gt;The issue with workflow states and transitions&lt;/h2&gt;
&lt;p&gt;The tip of the gruik &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[*]&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;I have been investigated some months ago with &lt;a class="reference external" href="http://encolpe.wordpress.com/"&gt;Encolpe Degoute&lt;/a&gt; on how to set a workflow state on a content
when the workflow is DCWorkflow powered (Plone of course). Things are not that
simple since DCWorkflow does not provide a public API for this. Instead, we
must execute the various transitions that are slow and may trigger unwanted
events.&lt;/p&gt;
&lt;div class="admonition admonition-attention"&gt;
&lt;p class="first admonition-title"&gt;Attention&lt;/p&gt;
&lt;p class="last"&gt;This small scripts uses deep inners private API of DCWorkflow (yeah, that's
evil, but...) and makes the expected job:&lt;/p&gt;
&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sets the workflow state of a content to whatever state without
executing any transition&lt;/li&gt;
&lt;li&gt;Sets its security martix as expected&lt;/li&gt;
&lt;li&gt;Reindexes content security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the baby... In the hope it will be useful to others and maybe
get improvements...&lt;/p&gt;
&lt;p&gt;It has been used in many Plone apps and migration utilities.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.CMFCore.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getToolByName&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;DateTime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;folderish&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;folderish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;invokeFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Document&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Blah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;blah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;folderish&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;changeWorkflowState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blah&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;published&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comments&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;No comment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;changeWorkflowState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acquire_permissions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;portal_workflow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Change the workflow state of an object&lt;/span&gt;
&lt;span class="sd"&gt;    @param content: Content obj which state will be changed&lt;/span&gt;
&lt;span class="sd"&gt;    @param state_id: name of the state to put on content&lt;/span&gt;
&lt;span class="sd"&gt;    @param acquire_permissions: True-&amp;gt;All permissions unchecked and on riles and&lt;/span&gt;
&lt;span class="sd"&gt;                                acquired&lt;/span&gt;
&lt;span class="sd"&gt;                                False-&amp;gt;Applies new state security map&lt;/span&gt;
&lt;span class="sd"&gt;    @param portal_workflow: Provide workflow tool (optimisation) if known&lt;/span&gt;
&lt;span class="sd"&gt;    @param kw: change the values of same name of the state mapping&lt;/span&gt;
&lt;span class="sd"&gt;    @return: None&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;portal_workflow&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;portal_workflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getToolByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;portal_workflow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Might raise IndexError if no workflow is associated to this type&lt;/span&gt;
    &lt;span class="n"&gt;wf_def&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;portal_workflow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getWorkflowsFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;wf_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wf_def&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;wf_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;actor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;comments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Setting state to &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;state_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;review_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;state_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;# Updating wf_state from keyword args&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# Remove unknown items&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;wf_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;review_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;review_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;wf_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;portal_workflow&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setStatusOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wf_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wf_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;acquire_permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Acquire all permissions&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;permission&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;possible_permissions&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;manage_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;acquire&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Setting new state permissions&lt;/span&gt;
        &lt;span class="n"&gt;wf_def&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;updateRoleMappingsFor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Map changes to the catalogs&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reindexObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idxs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;allowedRolesAndUsers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;review_state&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="pros"&gt;
&lt;h2&gt;Pros&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's damn fast. Consider using changeWorkflowState if you need to set
the workflow on a huge set of contents in one transaction. Read a
content migration or a bulk content creation.&lt;/li&gt;
&lt;li&gt;You can set the workflow state you want, including a state that's no
in the workflow associated with the content ;o)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="cons"&gt;
&lt;h2&gt;Cons&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Doesn't use legacy API. So this may or may not work with future versions of
DCWorkflow.&lt;/li&gt;
&lt;li&gt;Doesn't use the transitions. This is an intentional feature forspeeding up
all this. As a consequence, no transition script or eventis triggered. But
this is perhaps not recorded in workflow history. Honestly this is not an
issue for my use case.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a counterpart, there's no control on the validity of the state value in the
context (global workflow or placeful workflow). Buggy user code may issue
content on which no workflow transition is possible.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;French speaking readers will understand. For others, &amp;quot;Gruik&amp;quot; is the sound of the pig.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category></entry><entry><title>Back on iw.memberreplace</title><link href="http://glenfant.github.io/back-on-iwmemberreplace.html" rel="alternate"></link><published>2009-03-08T14:36:00+01:00</published><updated>2009-03-08T14:36:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2009-03-08:/back-on-iwmemberreplace.html</id><summary type="html">&lt;p class="first last"&gt;Bulk attributing content to members&lt;/p&gt;
</summary><content type="html">&lt;p&gt;I blogged some months ago about &lt;a class="reference external" href="http://plone.org/products/iw-memberreplace/"&gt;iw.memberrreplace&lt;/a&gt;
in &lt;a class="reference external" href="http://glenfant.github.io/safely-replace-a-plone-member.html"&gt;this page&lt;/a&gt;. In some words,
iw.memberreplace provides a tool that clones the security features of an unser
to another one (ownership, DC creator, sharings, group membership). No more
hassle digging around huge Plone site and hundreds of clicks to do this.&lt;/p&gt;
&lt;p&gt;Last week, I read a conversation with &lt;a class="reference external" href="http://n2.nabble.com/Re%3A-what%27s-up-with-plone.app.changeownership-%21-%21-tp2416270p2416270.html"&gt;John Stahl and Mustapha
Benali&lt;/a&gt;
about the &lt;a class="reference external" href="http://plone.org/products/plone/roadmap/185/"&gt;PLIP 185&lt;/a&gt;,
and realized that this PLIP is almost iw.memberreplace (or the
opposite).&lt;/p&gt;
&lt;p&gt;So I spend a couple of hours on that component to add the last details
on that component. Et voilà, the last release of iw.memberreplace
(1.0.0-RC1) fulfills now that PLIP: the original member can now be
removed - if defined in a mutable users source.&lt;/p&gt;
&lt;p&gt;I swear that in the future, I will read the open PLIPs before creating a
new component ;o)&lt;/p&gt;
&lt;p&gt;Enjoy...&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="The control panel" src="http://glenfant.github.io/images/memberreplace-control-panel.png" /&gt;
&lt;p class="caption"&gt;The control panel&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category><category term="Zope 3"></category></entry><entry><title>OpenXml and openxmllib - looking for volunteers</title><link href="http://glenfant.github.io/openxml-and-openxmllib-looking-for-volunteers.html" rel="alternate"></link><published>2008-11-21T14:50:00+01:00</published><updated>2008-11-21T14:50:00+01:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-11-21:/openxml-and-openxmllib-looking-for-volunteers.html</id><summary type="html">&lt;p class="first last"&gt;If tyou care of MS 2007 or later support in Plone...&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/openxmllib/"&gt;openxmllib&lt;/a&gt; is a pure Python package
built on lxml that parses an ECMA373 office file (read &lt;tt class="docutils literal"&gt;*.docx&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;*.pptx&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;*.xlsx&lt;/tt&gt; recorded from MS Office 2007). It can actually extract - very fast
- the indexable words from an MS Office 2007 document. It may be used from any
Python app, even from others (Java, PHP, C++ ...)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://plone.org/products/openxml"&gt;Products.OpenXml&lt;/a&gt; is a component for
Plone 2.5 -&amp;gt; 3.2 that registers the MIME types and icons for the known
extensions for these office files and provides transform rules to indexable
text, such MS Office 2007 documents in ATFile or any content type with a
searchable FileField are indexed.&lt;/p&gt;
&lt;p&gt;Both are avalaible at the cheeseshop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-directions"&gt;
&lt;h2&gt;Future directions&lt;/h2&gt;
&lt;p&gt;Yeah, those babies make satisfying job at the moment, I have not enough room
to copy the testimonies of satisfied users. But users want more...&lt;/p&gt;
&lt;div class="section" id="have-real-plain-text"&gt;
&lt;h3&gt;Have real plain text&lt;/h3&gt;
&lt;p&gt;openxmllib actually provides all words from a document. This is very fast
because some XPath expressions make the job. But when the result is
appropriate for indexing, it is not human friendly. The words are returned in
any order and there's no way to understand what's written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="have-html-preview"&gt;
&lt;h3&gt;Have HTML preview&lt;/h3&gt;
&lt;p&gt;Yes, previews of office documents in a Plone site are great. ARFilePreview
shows some of what I want to do: having a nice HTML document, visually as
close as possible from the printed document.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="volunteers"&gt;
&lt;h2&gt;Volunteers?&lt;/h2&gt;
&lt;p&gt;Unfortunately, I have not much time to spend for this, and the ones who asked
these features didn't want to participate or fund my work. You are interrested
for adding these features, please let me know. Skills in XSLT and in the
ECMA373 standard are required for this.&lt;/p&gt;
&lt;p&gt;Many thanks by avance.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Safely replace a Plone member</title><link href="http://glenfant.github.io/safely-replace-a-plone-member.html" rel="alternate"></link><published>2008-10-17T15:47:00+02:00</published><updated>2008-10-17T15:47:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-10-17:/safely-replace-a-plone-member.html</id><summary type="html">&lt;p class="first last"&gt;You replace a member by another one in your organisation. Plone has a tool to reflect this in its content.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;This component replies to a well known use cases and request from our
customers, especially from intranet managers.&lt;/p&gt;
&lt;p&gt;How do we do on our Plone intranet when Mr Foo dismisses our company and Ms
Bar is entitled to do his job?&lt;/p&gt;
&lt;p&gt;Ms Bruni just married and she's now Mrs Sarkozy. Her login is now c.sarkozy
and she lost the permissions she had on some contents she used to work on. How
shall I handle this? Should I browse in the site finding all her stuffs and
change the sharings, property (...) accordingly?&lt;/p&gt;
&lt;p&gt;Some weeks ago, this was in a bunch of code I included in private site
products. Some days ago, I released it as a public component.&lt;/p&gt;
&lt;p&gt;Just install
&lt;a class="reference external" href="http://pypi.python.org/pypi/iw.memberreplace"&gt;iw.memberreplace&lt;/a&gt;,
open its control panel, select the desired options and let it do all the
job - that otherwise would require hours of digging - for you.&lt;/p&gt;
&lt;p&gt;Enjoy, and as always, feedback and contributions are welcome.&lt;/p&gt;
</content><category term="Blog"></category></entry><entry><title>Safer GenericSetup upgrade steps</title><link href="http://glenfant.github.io/safer-genericsetup-upgrade-steps.html" rel="alternate"></link><published>2008-09-18T16:27:00+02:00</published><updated>2008-09-18T16:27:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-09-18:/safer-genericsetup-upgrade-steps.html</id><summary type="html">&lt;p class="first last"&gt;Protect upgrade steps from being ran in bad places.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Upgrading Plone extensions using GenericSetup upgrade steps. A great idea.
Easy to develop, easy to use and document. A unified upgrade interface for
every Plone extension.&lt;/p&gt;
&lt;p&gt;Anyway, there's actually an annoying issue on upgrade steps: upgrade steps for
component &amp;quot;foo&amp;quot; are exposed in sites where the &amp;quot;foo&amp;quot; component is &lt;strong&gt;not
installed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Wow, managers on instances where various different Plone sites are installed
have to be careful on this. Running an upgrade step of a component that is not
installed in a site may be harmful. Even if upgrade scripts are supposed to be
defensively programmed.&lt;/p&gt;
&lt;p&gt;Having several Plone extensions, I made a decorator based generic safety belt.
Of course this does not prevent GS showing the upgrade steps but executing
such upgrade steps raises an explicit error message and does not execute the
upgrade step.&lt;/p&gt;
&lt;p&gt;Just add these lines to your &lt;tt class="docutils literal"&gt;utils.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zope.component&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;getUtility&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.CMFCore.interfaces&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ISiteRoot&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PROJECTNAME&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotInstalledComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;LookupError&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cpt_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpt_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cpt_name&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Component &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; is not installed in this site.&amp;quot;&lt;/span&gt;
               &lt;span class="s2"&gt;&amp;quot; You can&amp;#39;t run its upgrade steps.&amp;quot;&lt;/span&gt;
                &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpt_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IfInstalled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The decorator&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prod_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PROJECTNAME&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;@param prod_name: as shown in quick installer&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prod_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prod_name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;@param func: the decorated function&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setuptool&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;portal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getUtility&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ISiteRoot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;qi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;portal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;portal_quickinstaller&lt;/span&gt;
            &lt;span class="n"&gt;installed_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;qi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listInstalledProducts&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prod_name&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;installed_ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;NotInstalledComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prod_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setuptool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
        &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then your upgrade scripts should be decorated like this in your &lt;tt class="docutils literal"&gt;upgrades.py&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IfInstalled&lt;/span&gt;
&lt;span class="nd"&gt;@IfInstalled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someUpgradeFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setuptool&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Stuff as usual...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You're done...&lt;/p&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Have your views rendered with DTML</title><link href="http://glenfant.github.io/have-your-views-rendered-with-dtml.html" rel="alternate"></link><published>2008-08-16T19:23:00+02:00</published><updated>2008-08-16T19:23:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-08-16:/have-your-views-rendered-with-dtml.html</id><summary type="html">&lt;p class="first last"&gt;DTML can still be used easily in Plone views.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Have your views rendered with DTML&lt;/h2&gt;
&lt;p&gt;As we're supposed to kill the CMF skins layer in the Plone components, when
tailoring the old style products to components, we put all static data
(images, javascripts, stylesheets) in resources directories, python scripts to
views and adpters, controller page templates to plone.app.form or
plone.app.z3cform schemes, and so on...&lt;/p&gt;
&lt;p&gt;But the new style resource directory doesn't take care about DTML as it does
for page templates. And for some kinds of stuffs like dynamic CSS/Javascript,
or making a CSV file, DTML is yet the better suited than ZPT.&lt;/p&gt;
&lt;p&gt;Yes you can publish DTML based views/pages/viewlets. This is not obvious but
not that much complicated. This small example shows how to add a stylesheet
using the standard Plone &lt;tt class="docutils literal"&gt;base_properties&lt;/tt&gt; CSS data.&lt;/p&gt;
&lt;p&gt;First the ZCML bunch at .../browser/configure.zcml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;browser:page&lt;/span&gt;
  &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mystytles.css&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Products.CMFPlone.interfaces.IPloneSiteRoot&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.stylesheet.MyStylesheet&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;permission=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zope2.Public&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So we'll have that sthylesheet published at &lt;a class="reference external" href="http:/"&gt;http:/&lt;/a&gt;/&amp;lt;your-site&amp;gt;/mystyles.css.&lt;/p&gt;
&lt;p&gt;Now the .../browser/stylesheet.py module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Globals&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DTMLFile&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.Five.browser&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BrowserView&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;this_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;templates_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;templates&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Don&amp;#39;t add &amp;quot;.dtml&amp;quot; to the file name though the file is &amp;quot;mystyles.css.dtml&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;mystylesheet_dtml&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DTMLFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mystyles.css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;templates_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStylesheet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BrowserView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This view is published&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="c1"&gt;# Wrap acquisition context to template&lt;/span&gt;
        &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mystylesheet_dtml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__of__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Note that you can provide other named args below you might need in&lt;/span&gt;
        &lt;span class="c1"&gt;# your template&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally our DTML template at .../browser/templates/mystyles.css.dtml&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/* &amp;lt;dtml-with &amp;quot;context.base_properties&amp;quot;&amp;gt; (do not remove this :)
&amp;lt;dtml-let portal_url=&amp;quot;context.absolute_url()&amp;quot;&amp;gt; (do not remove this :)
*/

.silly {
  color: &amp;amp;dtml-discreetColor;;
}
.foo {
  background: &amp;amp;dtml-portal_url;/some-image.gif;
}

/* &amp;lt;/dtml-let&amp;gt;&amp;lt;/dtml-with&amp;gt; (do not remove this :) */
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You just need to add &amp;quot;mystyles.css&amp;quot; to the Plone CSS registry but that's
another story. That's all folks.&lt;/p&gt;
&lt;p&gt;Note that you could prefer using
&lt;a class="reference external" href="http://pypi.python.org/pypi/z3c.zrtresource"&gt;z3c.zrtresource&lt;/a&gt; if
you're bleeding-edge oriented developer.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Plone needs a webmaster role</title><link href="http://glenfant.github.io/plone-needs-a-webmaster-role.html" rel="alternate"></link><published>2008-07-22T10:33:00+02:00</published><updated>2008-07-22T10:33:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-07-22:/plone-needs-a-webmaster-role.html</id><summary type="html">&lt;p class="first last"&gt;We need an intermediate role between a technical manager and a content manager.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Yes, we have the best open-source professional CMS of the galaxy - and beyond
- out here. With the age and of course the help of the framework developers
and lots of others, Plone gained lots of functionnalities. A huge set of
options to tweak a Plone site such it is your Plone site are now available
through the Plone content panel.&lt;/p&gt;
&lt;p&gt;As Plone professional, I have to train site managers for customers. And most
of the new site managers I have to train are not IT professional. Most are
marketing or communication executives. And when most of them have good
functional skills and know what they want to do with their Plone site and how
to provide information and services to visitors, it is somehow dificult to
teach them about HTML/CSS filtering, Javascript adds, SMTP connection, Plone
extension (un, re)installation, ZMI access and other potentially harmful
control panels.&lt;/p&gt;
&lt;p&gt;As a consequence, I sometimes need to hide potentially harmful control panels
to such non technical managers on these sites.&lt;/p&gt;
&lt;p&gt;I'm sure lots of you, dear Plone service providers who read these lines, are
often facing such situations. That's why I think that there's a place for a
new OTB role in Plone. I'll call it &amp;quot;webmaster&amp;quot; at the moment.&lt;/p&gt;
&lt;p&gt;Such user could do most things a Manager is enabled to do through the Plone
except accessing those harmful control panels.&lt;/p&gt;
&lt;p&gt;To make short, a webmaster would have all Manager permissions granted except
&amp;quot;View management screens&amp;quot;. Of course, from there it's fairly easy to hide the
links to ZMI, Extensions management and others from the control panels, but it
does not solve lots of other things that requires some tweaks in the control
panels.&lt;/p&gt;
&lt;p&gt;Any though ?&lt;/p&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Using decorated functions in ZCML</title><link href="http://glenfant.github.io/using-decorated-functions-in-zcml.html" rel="alternate"></link><published>2008-06-09T11:05:00+02:00</published><updated>2008-06-09T11:05:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-06-09:/using-decorated-functions-in-zcml.html</id><summary type="html">&lt;p class="first last"&gt;Decorators play with object external names. Don't let it do.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;As python programmer, I love the elegant way to tweak function behaviours with
decorators.&lt;/p&gt;
&lt;p&gt;In order not to be executed when another profile is invoked, most setup
handler functions must start with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setupSomeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readDataFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;mysite.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="c1"&gt;# Let&amp;#39;s do the job baby&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the site I'm working on needs a lot of handlers that are used in various
conditions like this one. But there are lots of such...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;gs:importStep&lt;/span&gt;
   &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Products.MySite.setupSomeStuff&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Stuff that site&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;description=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;D&amp;#39;ya know what stuffing means...&amp;quot;&lt;/span&gt;
   &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Products.MySite.setuphandlers.setupSomeStuff&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;depends&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Products.MySite.importSiteStructure&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/gs:importStep&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...and of course as many setup handler functions.&lt;/p&gt;
&lt;p&gt;In order to shorten a little bit the code, I made a simple decorator that
executes the setup handler only in the context of the extension profile.
Should be fine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;thisProfileOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Decorator that prevents the setup func to be used on other GS profiles.&lt;/span&gt;
&lt;span class="sd"&gt;    Usage:&lt;/span&gt;
&lt;span class="sd"&gt;    @thisProfileOnly&lt;/span&gt;
&lt;span class="sd"&gt;    def someFunc(context): ...&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readDataFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mysite.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*NOT* Executing setuphandler function &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Executing setuphandler function &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@thisProfileOnly&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setupSomeStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Let&amp;#39;s do the job baby&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let's go baby... But wait... It does not work! Importing the profile doe
not run the setup handlers.&lt;/p&gt;
&lt;p&gt;Having a deeper look into all this, I found that the relevant
GenericSetup registry does hold the decorated functions but the unbound
wrapper itself. Bad news.&lt;/p&gt;
&lt;p&gt;Is it a bug or a feature? Anyway, digging in the Python gurus blogs, I
found how to work this around, augmenting the wrapper such it gets most
of the decorated function signature. Follow the lines in red in the
fixed decorator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;thisProfileOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Decorator that prevents the setup func to be used on other GS profiles.&lt;/span&gt;
&lt;span class="sd"&gt;    Usage:&lt;/span&gt;
&lt;span class="sd"&gt;    @thisProfileOnly&lt;/span&gt;
&lt;span class="sd"&gt;    def someFunc(context): ...&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readDataFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modulo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*NOT* Executing setuphandler function &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Executing setuphandler function &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__module__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, with such decorators, you may use decorated functions in your ZCML.&lt;/p&gt;
&lt;p&gt;Note that this should be useless from Python 2.5, but I didn't test in
such situation (too lazy to try to run the Zope/Plone machinery with
Python 2.5).&lt;/p&gt;
&lt;div class="admonition admonition-note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;As of Python 2.5, you do't need this antmore. Rather use the
&lt;tt class="docutils literal"&gt;functools.wraps&lt;/tt&gt; decorator to have the same effect.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Other sources about advanced Python decorators:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ibm.com/developerworks/linux/library/l-cpdecor.html"&gt;Charming Python: decorators make magic
easy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.phyast.pitt.edu/~micheles/python/documentation.html"&gt;The decorator
module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category><category term="Zope 3"></category></entry><entry><title>Eclipse/pydev and buildout</title><link href="http://glenfant.github.io/eclipsepydev-and-buildout.html" rel="alternate"></link><published>2008-05-25T15:51:00+02:00</published><updated>2008-05-25T15:51:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-05-25:/eclipsepydev-and-buildout.html</id><summary type="html">&lt;p class="first last"&gt;An Eclipse / Pydev helper to enable smart completion on a zc.buildout project.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://pydev.sourceforge.net/"&gt;Pydev&lt;/a&gt; has a nice code completion feature
when editing Python code. You start typing a name, and Eclipse/Pydev offers
context specific completions with call tips that saves a lot of time when
programming for a hugh framework like Plone.&lt;/p&gt;
&lt;p&gt;This requires to stuff somehow the PYTHONPATH for your project. This is fairly
easy with a Plone bundle install tarball, where you just need to provide the
paths to the Products directory, the &lt;tt class="docutils literal"&gt;lib/python&lt;/tt&gt; of your instance and the
global Zope &lt;tt class="docutils literal"&gt;$SOFTWARE_HOME&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;With an instance created with buildout, things are not as
straightforward. Such an instance is made of tons of eggs that are not
in the standard &amp;quot;site-packages&amp;quot;, in addition, Zope 2 style products may
be located in various places. Adding all this manually in the Pydev
project PYTHONPATH is a real nightmare.&lt;/p&gt;
&lt;p&gt;Hopefully we have two recipe companions who can help us a lot
configuring Eclipse + Pydev on your buildout instance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/iw.recipe.cmd"&gt;iw.recipe.cmd&lt;/a&gt; that
builds some symlinks tree, with the help of some Python lines, for...&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/pb.recipes.pydev/"&gt;pb.recipe.pydev&lt;/a&gt;
that makes most of the job&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From now we assume you already have a ready Plone 3.x instance.&lt;/p&gt;
&lt;p&gt;With Eclipse, create a new Pydev project, say at the root of your
buildout. Do not add anything to the Pydev - PYTHONPATH of that project.
Now quit Eclipse. Your instance root should have a &lt;tt class="docutils literal"&gt;.pydevproject&lt;/tt&gt; file.&lt;/p&gt;
&lt;p&gt;Open your &lt;tt class="docutils literal"&gt;buildout.cfg&lt;/tt&gt; and add that stuff:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[buildout]&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;zope-directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/path/to/your/Zope-2.10.5&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="na"&gt;parts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    ...&lt;/span&gt;
&lt;span class="s"&gt;    make_pydev_init_files&lt;/span&gt;
&lt;span class="s"&gt;    pydev&lt;/span&gt;
&lt;span class="s"&gt;    ...&lt;/span&gt;
&lt;span class="c1"&gt;# Do not add parts that add eggs or products after the above parts&lt;/span&gt;
&lt;span class="na"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;[make_pydev_init_files]&lt;/span&gt;
&lt;span class="c1"&gt;# we need this (a Products directory with symlinks to all plone products)&lt;/span&gt;
&lt;span class="c1"&gt;# to have completion of code in the Products namespace&lt;/span&gt;
&lt;span class="na"&gt;recipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;iw.recipe.cmd:py&lt;/span&gt;
&lt;span class="na"&gt;on_install&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="na"&gt;cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; import os&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; dirs = &amp;quot;&amp;quot;&amp;quot;${instance:products}&amp;quot;&amp;quot;&amp;quot;.split(&amp;quot;\n&amp;quot;)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; prodlinks = os.path.join(&amp;quot;&amp;quot;&amp;quot;${buildout:directory}&amp;quot;&amp;quot;&amp;quot;.strip() , &amp;#39;pydevlinks&amp;#39;)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; Products = os.path.join(prodlinks,&amp;#39;Products&amp;#39;)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; if not os.path.isdir(prodlinks): os.mkdir(prodlinks)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; if not os.path.isdir(Products): os.mkdir(Products)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; file(os.path.join(Products , &amp;#39;__init__.py&amp;#39;),&amp;#39;w&amp;#39;).write(&amp;#39;#&amp;#39;)&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt; for dir in dirs:&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt;     if not dir: continue&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt;     for product in [os.path.join(dir,a) for a in os.listdir(dir) if os.path.isdir(os.path.join(dir,))]:&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt;         linkname = os.path.join(Products, os.path.basename(product))&lt;/span&gt;
&lt;span class="s"&gt;      &amp;gt;&amp;gt;&amp;gt;         if not os.path.islink(linkname): os.symlink(product,linkname)&lt;/span&gt;

&lt;span class="k"&gt;[pydev]&lt;/span&gt;
&lt;span class="na"&gt;recipe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;pb.recipes.pydev&lt;/span&gt;
&lt;span class="na"&gt;eggs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;${instance:eggs}&lt;/span&gt;

&lt;span class="c1"&gt;# See [make_pydev_init_files] below&lt;/span&gt;
&lt;span class="na"&gt;extra_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;    ${buildout:directory}/pydevlinks&lt;/span&gt;
&lt;span class="s"&gt;    ${buildout:zope-directory}/lib/python&lt;/span&gt;
&lt;span class="na"&gt;pydevproject_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;${buildout:directory}/.pydevproject&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Re-run your buildout. That's OK? Now open Eclipse and view your project
properties. Et voilà...&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Eclipse dashboard" src="http://glenfant.github.io/images/pydev-pythonpath.png" /&gt;
&lt;p class="caption"&gt;PYTHONPATH of Eclipse / Pydev environment&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;As you can see we use &amp;quot;os.symlink&amp;quot; to fake a products hierarchy. Windows
(NTFS) users should install a symlink tool like
&amp;quot;&lt;a class="reference external" href="http://www.microsoft.com/technet/sysinternals/fileanddisk/junction.mspx"&gt;junction&lt;/a&gt;&amp;quot;
and tweak the script of the &lt;tt class="docutils literal"&gt;make_pydev_init_files&lt;/tt&gt; part.&lt;/p&gt;
&lt;div class="admonition admonition-caveat"&gt;
&lt;p class="first admonition-title"&gt;Caveat&lt;/p&gt;
&lt;p class="last"&gt;do not change manually anything that's in the &lt;tt class="docutils literal"&gt;/prodlinks&lt;/tt&gt; directory of
your buildout unless...&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Many thanks to &lt;a class="reference external" href="http://www.nabble.com/-Fwd%3A-Re%3A--Product-Developers--buildout-and-eclipse--td16697376s20094.html#a16699863"&gt;Tim Knapp and
Sylvio&lt;/a&gt;
for the hints in the products developers mailing list. Now this is in a
blog.&lt;/p&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Archetypes sucks...</title><link href="http://glenfant.github.io/archetypes-sucks.html" rel="alternate"></link><published>2008-05-09T15:04:00+02:00</published><updated>2008-05-09T15:04:00+02:00</updated><author><name>glenfant</name></author><id>tag:glenfant.github.io,2008-05-09:/archetypes-sucks.html</id><summary type="html">&lt;p class="first last"&gt;Hearing bad feedbacks from Archetypes. WTF?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Eh, not my personal opinion but...&lt;/p&gt;
&lt;p&gt;That's what we can read in some posts and blogs. So, why does AT sucks
according to these opinions?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's old style python (read mostly plain 2.1 python) and doesn't use
the latest features that came up to Python 2.4 (decorators, misc new
style classes features...).&lt;/li&gt;
&lt;li&gt;There's no out of the box support for repetead fields or groups of
fields (read &amp;quot;we can't add n files or images&amp;quot;)&lt;/li&gt;
&lt;li&gt;AT is uselessly noisy, and it's code is now as messy as obese.&lt;/li&gt;
&lt;li&gt;AT is slow, more specifically for authors, and is a major cause of
Plone lazyness.&lt;/li&gt;
&lt;li&gt;AT APIs are sometimes complicated. We use
&amp;quot;content.getField('foo').set(content, value)&amp;quot; when Python 2.4 could
let us just type &amp;quot;content.fields.foo = value&amp;quot; or better &amp;quot;content.foo
= value&amp;quot;.&lt;/li&gt;
&lt;li&gt;AT is not Zope3 &amp;quot;ish&amp;quot;, or does the minimal stuff to run within Plone
3. And yes, it uses always the old style Zope 2 interfaces, CMF skins
layer, nested complex ZPT macros where viewlets could do better job.&lt;/li&gt;
&lt;li&gt;The set of metadata that ship with AT is not really extensible or
replaceable though it's named ExtensibleMetadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So... Let's &lt;strong&gt;KILL&lt;/strong&gt; Archetypes! Yes, and what else?&lt;/p&gt;
&lt;p&gt;Okay there's new kids on the block. There's lot of buzz around good
newcomers in the field of AT, like the new plone base contents (see the
&lt;a class="reference external" href="http://pypi.python.org/pypi/plone.app.content"&gt;plone.app.content&lt;/a&gt;
egg) you can use if you don't need advanced features.&lt;/p&gt;
&lt;p&gt;Or you could wait for the promising new framework
&lt;a class="reference external" href="http://devilstickproject.net/"&gt;Devilstick&lt;/a&gt; that will let us define
the data model with XML.&lt;/p&gt;
&lt;p&gt;Just don't forget that if Plone ships with a nice collection of content
types, has so many third party content types and rich services, if Plone
is often referred as the best open-source CMS, if you can sell Plone
based competitive solutions to your customers you just need to say
&amp;quot;&lt;strong&gt;Thank you so much Archetypes developers&lt;/strong&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;In addition, most (all?) of above listed issues of today's Archetypes
can be fixed in the future without breaking support for actual content
types.&lt;/p&gt;
&lt;p&gt;Due to so many skilled developers and rich solutions Archetypes is here
to stay for years and years. Yeah!&lt;/p&gt;
</content><category term="Blog"></category><category term="Plone"></category></entry><entry><title>Doing my ZCML</title><link href="http://glenfant.github.io/doing-my-zcml.html" rel="alternate"></link><published>2008-05-09T12:46:00+02:00</published><updated>2008-05-09T12:46:00+02:00</updated><author><name>Gilles Lenfant</name></author><id>tag:glenfant.github.io,2008-05-09:/doing-my-zcml.html</id><summary type="html">&lt;p class="first last"&gt;Make your custom ZCML directives&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="forewords"&gt;
&lt;h2&gt;Forewords&lt;/h2&gt;
&lt;p&gt;Howdy folks,&lt;/p&gt;
&lt;p&gt;Lots of us, poor Plone components developers, have been somehow stuck
discovering the new Plone 3 architecture before having some
enlightenments from plone.org documentation or various blogs or better,
from Martin Aspeli essential book.&lt;/p&gt;
&lt;p&gt;Across most new programming behaviours, you noticed the massive use of
ZCML coming along with the various components, packages or products &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[*]&lt;/a&gt;
that ship with Plone 3 bundle.&lt;/p&gt;
&lt;p&gt;At first glance, I had some pain trying to understand what's behind the
scene and as Zope 3 dummy, didn't understand why we should use such a
cryptic damned notation. Okay, why should we learn another language when
we can do all this in Python? I heard ZCML is for site integrators.
Well, for those integrators who already know how to read Python source
but certainly not the ones who expand products then play in ZMI to add
features in a Plone site.&lt;/p&gt;
&lt;p&gt;In addition, finding good tutorials on ZCML usage in Plone 3 was painful
before fall 2007.&lt;/p&gt;
&lt;p&gt;So far, so good, I started to upgrade some public Plone extension
products using ZCML without really understanding fully the &amp;quot;how what
why&amp;quot; of all this, and it worked. But why?&lt;/p&gt;
&lt;p&gt;Among the products I'm prettily proud to maintain, there's
&lt;a class="reference external" href="http://plone.org/products/filesystemstorage"&gt;FileSystemStorage&lt;/a&gt;
(FSS) that's now &amp;quot;componentized&amp;quot; the Plone 3 way to ease its
installation with buildout (but that's another story). For those who
didn't click here, FSS let your Archetypes content types store fieds
values directly in the file system rather than in plain ZODB object
attributes or annotations. This saves memory in Plone sites that serve
lots of big files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code-or-configuration"&gt;
&lt;h2&gt;Code or configuration&lt;/h2&gt;
&lt;div class="section" id="bind-with-code"&gt;
&lt;h3&gt;Bind with code&lt;/h3&gt;
&lt;p&gt;There's two ways to use FSS from content types.&lt;/p&gt;
&lt;div class="section" id="a-using-fss-in-your-own-content-types-in-the-content-type-schema-as-below"&gt;
&lt;h4&gt;(a) Using FSS in your own content types in the content type schema as below:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Usual Zope/CMF/Plone/Archetypes imports&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.FileSystemStorage.FileSystemStorage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemStorage&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;my_schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
    &lt;span class="n"&gt;FileField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileSystemStorage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileWidget&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="b-using-fss-for-third-party-content-types-as-done-below-for-the-standard-atfile"&gt;
&lt;h4&gt;(b) Using FSS for third party content types as done below for the standard ATFile:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.FileSystemStorage.FileSystemStorage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileSystemStorage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Products.ATContentTypes&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;atct&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;atct&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ATFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileSystemStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registerLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;storage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, this works but the pythonic glue of FSS with content types has two
caveats.&lt;/p&gt;
&lt;p&gt;At first, we should let the site integrators decide wether he should use
FSS for such or such content type attribute depending on the use, amount
of content (...) of the site without adding lines of Python.&lt;/p&gt;
&lt;p&gt;The second one: we depend on the public API of FSS and inners of
Archetypes to do this. This sucks somehow because we plan to transform
the FSS product into a Zope 3 component, this will change the imports.
In addition we use Archetypes low level API (field.registerLayer) to
re-initalize the field storage. That API is subject to changes in the
future as it is not in the public API.&lt;/p&gt;
&lt;p&gt;So what? We need to provide a higher level setup for FSS that may
support the furure and we don't want to freeze FSS API and we want to
honour potential Archetypes inner changes.&lt;/p&gt;
&lt;p&gt;We can't use ZMI/PMI settings because the storage layer of Archetypes
content must be set at an early stage of Zope startup, means before any
content object is waken up from ZODB.&lt;/p&gt;
&lt;p&gt;Using a ZConfig dedicated schema could be an option but ZConfig is not
well suited to such situations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bind-by-configuration"&gt;
&lt;h3&gt;Bind by configuration&lt;/h3&gt;
&lt;p&gt;Well, the best option is... Creating a ZCML directive for this. Let's
have a look on how to store ATFile content using FSS service from any
&amp;quot;configure.zcml&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;configure&lt;/span&gt;
   &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.zope.org/zope&amp;quot;&lt;/span&gt;
   &lt;span class="err"&gt;...&lt;/span&gt;
   &lt;span class="na"&gt;xmlns:fss=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.ingeniweb.com/filesystemstorage&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ...
  &lt;span class="nt"&gt;&amp;lt;fss:typeWithFSS&lt;/span&gt;
     &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Products.ATContentTypes.atct.ATFile&amp;quot;&lt;/span&gt;
     &lt;span class="na"&gt;fields=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  ...
&lt;span class="nt"&gt;&amp;lt;/configure&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Self explanative, doesn't require any comment for Plone integrators,
doesn't expose or require any specific API.&lt;/p&gt;
&lt;p&gt;Now I have defined this, we now need to add the machinery that makes the
glue between that elegant ZCML bunch and the deep inners behind the
scene.&lt;/p&gt;
&lt;p&gt;Digging deep into the Zope startup process, notably through Five, and we
can notice that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Five&lt;/tt&gt; processes a bunch all &amp;quot;meta.zcml&amp;quot;, that define the various
namespaces and elements that may be used in the &amp;quot;configure.zcml&amp;quot;.&lt;/li&gt;
&lt;li&gt;Then it processes all &lt;tt class="docutils literal"&gt;configure.zcml&lt;/tt&gt;, those &lt;tt class="docutils literal"&gt;configure.zcml&lt;/tt&gt; mainly
make the high level glue between the various components and products
of the instance.&lt;/li&gt;
&lt;li&gt;Finally it processes &lt;tt class="docutils literal"&gt;overrides.zcml&lt;/tt&gt;, if any that may change
standard settings provided in the above &lt;tt class="docutils literal"&gt;configure.zcml&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a short version and curious people will have a look at
&lt;tt class="docutils literal"&gt;$INSTANCE_HOME/etc/site.zcml&lt;/tt&gt; to see the details on how to customize the
ZCML setup. Note that with some magic of Five, you don't need to change
anything here if your main zcml files (&lt;tt class="docutils literal"&gt;meta.zcml&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;configure.zcml&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;override.zcml&lt;/tt&gt;) are in a Zope 2 style product.&lt;/p&gt;
&lt;p&gt;Okay, aren't you asleep or lost reading this long and boring technical
recipe? No? So let's continue and grab into the depth of the code!&lt;/p&gt;
&lt;p&gt;As stated above, I need to define the schema and handler of the element
&lt;tt class="docutils literal"&gt;&amp;lt;fss:typeWithFSS ...&lt;/tt&gt; from a &lt;tt class="docutils literal"&gt;meta.zcml&lt;/tt&gt; and a bunch of Python modules.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="making-the-zcml-directive"&gt;
&lt;h2&gt;Making the ZCML directive&lt;/h2&gt;
&lt;div class="section" id="the-meta-directive"&gt;
&lt;h3&gt;The meta directive&lt;/h3&gt;
&lt;p&gt;In my case, this is a simple element &lt;a class="footnote-reference" href="#id4" id="id2"&gt;[†]&lt;/a&gt; and stuff will be somehow
easy since I got the ZCML enlightenment. We can define the such primary
definition in the &amp;quot;meta.zcml&amp;quot;:&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="ln"&gt; 1 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;configure&lt;/span&gt;
&lt;span class="ln"&gt; 2 &lt;/span&gt;   &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.zope.org/zope&amp;quot;&lt;/span&gt;
&lt;span class="ln"&gt; 3 &lt;/span&gt;   &lt;span class="na"&gt;xmlns:meta=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.zope.org/meta&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="ln"&gt; 4 &lt;/span&gt;  &lt;span class="nt"&gt;&amp;lt;meta:directive&lt;/span&gt;
&lt;span class="ln"&gt; 5 &lt;/span&gt;     &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;typeWithFSS&amp;quot;&lt;/span&gt;
&lt;span class="ln"&gt; 6 &lt;/span&gt;     &lt;span class="na"&gt;namespace=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://namespaces.ingeniweb.com/filesystemstorage&amp;quot;&lt;/span&gt;
&lt;span class="ln"&gt; 7 &lt;/span&gt;     &lt;span class="na"&gt;schema=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.zcml.ITypeWithFSSDirective&amp;quot;&lt;/span&gt;
&lt;span class="ln"&gt; 8 &lt;/span&gt;     &lt;span class="na"&gt;handler=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.zcml.typeWithFSS&amp;quot;&lt;/span&gt;
&lt;span class="ln"&gt; 9 &lt;/span&gt;  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="ln"&gt;10 &lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/configure&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p class="rubric"&gt;Let's dig into it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Line 3: Don't forget to say we're defining a meta, defining its
namespace.&lt;/li&gt;
&lt;li&gt;Line 5: We define a simple directive, the simplest possible.&lt;/li&gt;
&lt;li&gt;Line 6: The name of our diective.&lt;/li&gt;
&lt;li&gt;Line 7: The namespace for this directive as seen above in the sample &lt;tt class="docutils literal"&gt;configure.zcml&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Line 8: The schema (read attributes in our case) of that directive is defined by a Zope3 interface.&lt;/li&gt;
&lt;li&gt;Line 9: The handler function that will be invoked for each
&lt;tt class="docutils literal"&gt;&amp;lt;fss:typeWithFSS ...&lt;/tt&gt; directive found at Zope startup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To keep the things simple, the schema and the handler belong to the same
module, &lt;tt class="docutils literal"&gt;zcml.py&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-schema"&gt;
&lt;h3&gt;The schema&lt;/h3&gt;
&lt;p&gt;The people who already made components based on Zope 3 formlib will be
familiar with such notation. A scema is just a Zope 3 interface that
defines in its Python attributes the XML attributes expected from your
directive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zope.interface&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Interface&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zope.configuration.fields&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;GlobalObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tokens&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PythonIdentifier&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ITypeWithFSSDirective&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Schema for fss:typeWithFSS directive&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;class_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GlobalObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Dotted name of class of AT based content type using FSS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Tokens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Fields&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Field name or space(s) separated field names&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;value_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PythonIdentifier&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;required&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All these configuration fields are defined in the
&lt;tt class="docutils literal"&gt;zope.configuration.fields&lt;/tt&gt; package. Have a look to this package to see what
other attribute types I could have used. Note that the attribute types inherit
from zope.schema resources that are familiar to Zope 3 formlib developers.&lt;/p&gt;
&lt;p class="rubric"&gt;Some comments:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If your attribute is not required, you may give a default value.&lt;/li&gt;
&lt;li&gt;You may use a Tokens attribute type where you need multivalued
attributes from the configuration, as I needed for the &amp;quot;fields&amp;quot;
attribute. In that case, you define the type for each single value in
the &lt;tt class="docutils literal"&gt;value_type&lt;/tt&gt; keyword argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, you can notice the &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; attribute of the interface
maps automatically to the &lt;tt class="docutils literal"&gt;class&lt;/tt&gt; attribute expected from the
configuration directive. This is a magic that maps all XML attributes
named with a Python keyword as &lt;tt class="docutils literal"&gt;class&lt;/tt&gt;, &amp;quot;for&amp;quot; and the rest.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-handler"&gt;
&lt;h3&gt;The handler&lt;/h3&gt;
&lt;p&gt;The handler will be invoked with all directive objectized attributes as
arguments.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typeWithFSS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Register our monkey patch&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;discriminator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;patchATType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;patchATType&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Processing the type patch&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fieldname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fieldname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FileSystemStorage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;registerLayer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;storage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Field &amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; of &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is stored in file system.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meta_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p class="rubric"&gt;The signature of the handler:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_context&lt;/tt&gt;: a context object defined and documented in details in
zope.configuration.interfaces.IConfigurationContext interface. We'll
talk about it later.&lt;/li&gt;
&lt;li&gt;The various attributes in the order of the schema. Optional
attributes should be passed as keywords args with a default value,
but we have no optional argument in our example.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see that we could immediately patch the content type, using
directly the &amp;quot;patchATType&amp;quot; function body inside the handler.&lt;/p&gt;
&lt;p&gt;But it's a much better practice to let the zcml machinery execute as
late as possible that function, and warn on potential conflicts of ZCML
configuration directives.&lt;/p&gt;
&lt;p&gt;In that intent, I prefer to register the FSS in the content type
invoking the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;_context.action(...)&lt;/span&gt;&lt;/tt&gt; with a discriminator on the class
name that will automatically warn on duplicate FSS patch on the same
content type class.&lt;/p&gt;
&lt;p&gt;Have a look at the interface of the &lt;tt class="docutils literal"&gt;_context&lt;/tt&gt; object. There are in
lots of other valuables services that you may use in other situations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope this small recipe brought you the &amp;quot;eureka&amp;quot; of the ZCML. As said
earlier in that recipe, you may make more complex ZCML directives, said
&amp;quot;grouping directives&amp;quot;. As you got the starter kit in this article about
making a simple directive, you'll get much information on complex
directives looking at the &amp;quot;meta.zcml&amp;quot; from Five or GenericSetup, and
their associated modules.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Should we clarify the words used here?&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[†]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Digging the code that handles &amp;quot;meta.zcml&amp;quot;, you'll notice that we may define more complex configuration schemas.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="Blog"></category><category term="Plone"></category><category term="Zope 2"></category><category term="Zope 3"></category></entry></feed>